/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGRUBY
#define SWIGRUBY
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ANYARGS) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT", swig_ruby_trackings_count, NULL);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(void* ptr, VALUE obj, void(*meth)(void* ptr, VALUE obj)) {
  (*meth)(ptr, obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings, (int (*)(ANYARGS))&swig_ruby_internal_iterate_callback, (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Ruby proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_NOUEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NOUEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif

#include <string>
#include <iostream>
#include <exception>
#include <map>

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {
    }

    virtual swig_ruby_owntype get_own() const {
      swig_ruby_owntype own = {0, 0};
      return own;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem *operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };


  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(swig_ruby_owntype own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    swig_ruby_owntype get_own() const {
      return _own;
    }

  private:
    swig_ruby_owntype _own;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };


  /* body args */
  struct body_args {
    VALUE recv;
    ID id;
    int argc;
    VALUE *argv;
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    VALUE swig_error;
    std::string swig_msg;
  protected:
    DirectorException(VALUE error) : swig_error(error) {
    }

    DirectorException(VALUE error, const char *hdr, const char *msg ="") : swig_error(error), swig_msg(hdr) {
      if (msg[0]) {
	swig_msg += " ";
	swig_msg += msg;
      }
      if (swig_msg.size()) {
	VALUE str = rb_str_new(swig_msg.data(), swig_msg.size());
	swig_error = rb_exc_new3(error, str);
      } else {
	swig_error = error;
      }
    }

  public:
    virtual ~DirectorException() throw() {
    }

    VALUE getType() const {
      return CLASS_OF(swig_error);
    }

    VALUE getError() const {
      return swig_error;
    }

    /* Deprecated, use what() instead */
    const std::string& getMessage() const {
      return swig_msg;
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
	throw;
      } catch (DirectorException& e) {
	std::cerr << "SWIG Director exception caught:" << std::endl
		  << e.what() << std::endl;
      } catch (std::exception& e) {
	std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
	std::cerr << "Unknown exception caught." << std::endl;
      }
      std::cerr << std::endl
		<< "Ruby interpreter traceback:" << std::endl;
      std::cerr << std::endl;
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
		<< "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
		<< std::endl
		<< "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };


  /* Type mismatch in the return value from a Ruby method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(VALUE error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(rb_eTypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(VALUE error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* Any Ruby exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(VALUE error)
      : DirectorException(error) {
    }

    DirectorMethodException(const char *msg = "")
      : DirectorException(rb_eRuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(VALUE error) {
      throw DirectorMethodException(error);
    }
  };

  /* Attempted to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException
  {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(rb_eRuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };

  /* Simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
# define __PTHREAD__
# if defined(_WIN32) || defined(__WIN32__)
#  define pthread_mutex_lock EnterCriticalSection
#  define pthread_mutex_unlock LeaveCriticalSection
#  define pthread_mutex_t CRITICAL_SECTION
#  define SWIG_MUTEX_INIT(var) var
# else
#  include <pthread.h>
#  define SWIG_MUTEX_INIT(var) var = PTHREAD_MUTEX_INITIALIZER
# endif
#endif

#ifdef  __PTHREAD__
  struct Guard {
    pthread_mutex_t *_mutex;

    Guard(pthread_mutex_t &mutex) : _mutex(&mutex) {
      pthread_mutex_lock(_mutex);
    }

    ~Guard() {
      pthread_mutex_unlock(_mutex);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped Ruby object */
    VALUE swig_self;
    /* flag indicating whether the object is owned by Ruby or c++ */
    mutable bool swig_disown_flag;

  public:
    /* wrap a Ruby object. */
    Director(VALUE self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
    }

    /* return a pointer to the wrapped Ruby object */
    VALUE swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped Ruby object (the sense of "disown" is from Ruby) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag = true;
      }
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __PTHREAD__
    static pthread_mutex_t swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const {
      if (vptr) {	
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, swig_ruby_owntype own) const {
      if (vptr && own.datafree) {
	SWIG_GUARD(swig_mutex_own);
	swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    swig_ruby_owntype swig_release_ownership(void *vptr) const {
      swig_ruby_owntype own = {0, 0};
      if (vptr) {
	SWIG_GUARD(swig_mutex_own);
	swig_ownership_map::iterator iter = swig_owner.find(vptr);
	if (iter != swig_owner.end()) {
	  own.datafree = iter->second->get_own().datafree;
	  swig_owner.erase(iter);
	}
      }
      return own;
    }
  };
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_b2AABB swig_types[0]
#define SWIGTYPE_p_b2Body swig_types[1]
#define SWIGTYPE_p_b2BodyDef swig_types[2]
#define SWIGTYPE_p_b2CircleShape swig_types[3]
#define SWIGTYPE_p_b2Color swig_types[4]
#define SWIGTYPE_p_b2ContactEdge swig_types[5]
#define SWIGTYPE_p_b2Draw swig_types[6]
#define SWIGTYPE_p_b2EdgeShape swig_types[7]
#define SWIGTYPE_p_b2Filter swig_types[8]
#define SWIGTYPE_p_b2Fixture swig_types[9]
#define SWIGTYPE_p_b2FixtureDef swig_types[10]
#define SWIGTYPE_p_b2Jacobian swig_types[11]
#define SWIGTYPE_p_b2Joint swig_types[12]
#define SWIGTYPE_p_b2JointDef swig_types[13]
#define SWIGTYPE_p_b2JointEdge swig_types[14]
#define SWIGTYPE_p_b2MassData swig_types[15]
#define SWIGTYPE_p_b2MotorJoint swig_types[16]
#define SWIGTYPE_p_b2MotorJointDef swig_types[17]
#define SWIGTYPE_p_b2ParticleColor swig_types[18]
#define SWIGTYPE_p_b2ParticleDef swig_types[19]
#define SWIGTYPE_p_b2ParticleGroup swig_types[20]
#define SWIGTYPE_p_b2ParticleGroupDef swig_types[21]
#define SWIGTYPE_p_b2ParticlePair swig_types[22]
#define SWIGTYPE_p_b2ParticleSystem swig_types[23]
#define SWIGTYPE_p_b2ParticleSystemDef swig_types[24]
#define SWIGTYPE_p_b2ParticleTriad swig_types[25]
#define SWIGTYPE_p_b2PolygonShape swig_types[26]
#define SWIGTYPE_p_b2QueryCallback swig_types[27]
#define SWIGTYPE_p_b2RayCastInput swig_types[28]
#define SWIGTYPE_p_b2RayCastOutput swig_types[29]
#define SWIGTYPE_p_b2RevoluteJoint swig_types[30]
#define SWIGTYPE_p_b2RevoluteJointDef swig_types[31]
#define SWIGTYPE_p_b2Shape swig_types[32]
#define SWIGTYPE_p_b2Transform swig_types[33]
#define SWIGTYPE_p_b2Vec2 swig_types[34]
#define SWIGTYPE_p_b2Version swig_types[35]
#define SWIGTYPE_p_b2World swig_types[36]
#define SWIGTYPE_p_char swig_types[37]
#define SWIGTYPE_p_double swig_types[38]
#define SWIGTYPE_p_float swig_types[39]
#define SWIGTYPE_p_int swig_types[40]
#define SWIGTYPE_p_long_long swig_types[41]
#define SWIGTYPE_p_short swig_types[42]
#define SWIGTYPE_p_signed_char swig_types[43]
#define SWIGTYPE_p_unsigned_char swig_types[44]
#define SWIGTYPE_p_unsigned_int swig_types[45]
#define SWIGTYPE_p_unsigned_long_long swig_types[46]
#define SWIGTYPE_p_unsigned_short swig_types[47]
static swig_type_info *swig_types[49];
static swig_module_info swig_module = {swig_types, 48, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_liquidfun
#define SWIG_name    "Liquidfun"

static VALUE mLiquidfun;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifndef LIQUIDFUN_EXTERNAL_LANGUAGE_API
    #define LIQUIDFUN_EXTERNAL_LANGUAGE_API 1
#endif
#include "../../Box2D/Box2D.h"


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/home/toon/bin/share/swig/4.0.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


/*@SWIG:/home/toon/bin/share/swig/4.0.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/home/toon/bin/share/swig/4.0.1/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (VALUE obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (VALUE obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


    static void mark_b2World(void* ptr) {
        b2World* world = (b2World*) ptr;
        /* Loop over each object and tell the garbage collector  that we are holding a reference to them. */
        if (world->GetBodyCount() > 0) {
            b2Body* bodyList = world->GetBodyList();
            for (b2Body* b = bodyList; b; b = b->GetNext())
            {
                VALUE object = SWIG_RubyInstanceFor(b);
                if (object != Qnil) {
                    rb_gc_mark(object);
                }
            }
        }

        if (world->GetJointCount() > 0) {
            b2Joint* jointList = world->GetJointList();
            for (b2Joint* j = jointList; j; j = j->GetNext())
            {
                VALUE object = SWIG_RubyInstanceFor(j);
                if (object != Qnil) {
                    rb_gc_mark(object);
                }
            }
        }

        b2Draw* debugDraw = world->GetDebugDraw();
        if (debugDraw != NULL) {
            VALUE object = SWIG_RubyInstanceFor(debugDraw);
            if (object != Qnil) {
                rb_gc_mark(object);
            } 
        }

        b2ParticleSystem* particleSystemList = world->GetParticleSystemList();
        if (particleSystemList) {
            for (b2ParticleSystem* ps = particleSystemList; ps; ps = ps->GetNext())
            {
                VALUE object = SWIG_RubyInstanceFor(ps);
                if (object != Qnil) {
                    rb_gc_mark(object);
                } 
            }
        }
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (VALUE obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


enum b2ExceptionType {
    BUFFER_TOO_SMALL,
    PARTICLE_INDEX_OUTOFBOUNDS,
    NUM_ERRORS,
    NO_EXCEPTIONS,
};

struct b2Exception {
    const int swigType;
    const char* errorMsg;
} g_liquidfunExceptions[NUM_ERRORS] = {
    {SWIG_OverflowError, "Supplied buffer is too small"},
    {SWIG_IndexError, "Particle index is out of bounds. Check startIndex and numParticles."},
};

/* ---------------------------------------------------
 * C++ director class helpers
 * --------------------------------------------------- */



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "liquidfun_wrap.h"

SwigDirector_B2Draw::SwigDirector_B2Draw(VALUE self): b2Draw(), Swig::Director(self) {
  
}



SwigDirector_B2Draw::~SwigDirector_B2Draw() {
}

void SwigDirector_B2Draw::DrawPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE SWIGUNUSED result;
  
  {
    obj0 = rb_ary_new2(vertexCount);
    VALUE vertex;
    for(int i = 0; i < vertexCount; ++i) {
      vertex = SWIG_NewPointerObj(SWIG_as_voidptr(&(vertices[i])), SWIGTYPE_p_b2Vec2, 0);
      rb_ary_push(obj0, vertex);
    }
  }
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_polygon"), 2,obj0,obj1);
}


void SwigDirector_B2Draw::DrawSolidPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE SWIGUNUSED result;
  
  {
    obj0 = rb_ary_new2(vertexCount);
    VALUE vertex;
    for(int i = 0; i < vertexCount; ++i) {
      vertex = SWIG_NewPointerObj(SWIG_as_voidptr(&(vertices[i])), SWIGTYPE_p_b2Vec2, 0);
      rb_ary_push(obj0, vertex);
    }
  }
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_solid_polygon"), 2,obj0,obj1);
}


void SwigDirector_B2Draw::DrawCircle(b2Vec2 const &center, float32 radius, b2Color const &color) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE obj2 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&center), SWIGTYPE_p_b2Vec2,  0 );
  obj1 = SWIG_From_float(static_cast< float >(radius));
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_circle"), 3,obj0,obj1,obj2);
}


void SwigDirector_B2Draw::DrawSolidCircle(b2Vec2 const &center, float32 radius, b2Vec2 const &axis, b2Color const &color) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE obj2 = Qnil ;
  VALUE obj3 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&center), SWIGTYPE_p_b2Vec2,  0 );
  obj1 = SWIG_From_float(static_cast< float >(radius));
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&axis), SWIGTYPE_p_b2Vec2,  0 );
  obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_solid_circle"), 4,obj0,obj1,obj2,obj3);
}


void SwigDirector_B2Draw::DrawParticles(b2Vec2 const *centers, float32 radius, b2ParticleColor const *colors, int32 count) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE obj2 = Qnil ;
  VALUE SWIGUNUSED result;
  
  {
    obj0 = rb_ary_new2(count);
    VALUE vertex;
    for(int i = 0; i < count; i++) {
      vertex = SWIG_NewPointerObj(SWIG_as_voidptr(&centers[i]), SWIGTYPE_p_b2Vec2, 0);
      rb_ary_push(obj0, vertex);
    }
  }
  obj1 = SWIG_From_float(static_cast< float >(radius));
  {
    if (colors != NULL) {
      obj2 = rb_ary_new2(count);
      VALUE vertex;
      for(int i = 0; i < count; i++) {
        vertex = SWIG_NewPointerObj(SWIG_as_voidptr(&colors[i]), SWIGTYPE_p_b2ParticleColor, 0);
        rb_ary_push(obj2, vertex);
      }
    }
    else {
      obj2 = Qnil;
    }
  }
  result = rb_funcall(swig_get_self(), rb_intern("draw_particles"), 3,obj0,obj1,obj2);
}


void SwigDirector_B2Draw::DrawSegment(b2Vec2 const &p1, b2Vec2 const &p2, b2Color const &color) {
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE obj2 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&p1), SWIGTYPE_p_b2Vec2,  0 );
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&p2), SWIGTYPE_p_b2Vec2,  0 );
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_segment"), 3,obj0,obj1,obj2);
}


void SwigDirector_B2Draw::DrawTransform(b2Transform const &xf) {
  VALUE obj0 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&xf), SWIGTYPE_p_b2Transform,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("draw_transform"), 1,obj0);
}


SwigDirector_B2QueryCallback::SwigDirector_B2QueryCallback(VALUE self): b2QueryCallback(), Swig::Director(self) {
  
}



SwigDirector_B2QueryCallback::~SwigDirector_B2QueryCallback() {
}

bool SwigDirector_B2QueryCallback::ReportFixture(b2Fixture *fixture) {
  bool c_result = SwigValueInit< bool >() ;
  VALUE obj0 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(fixture), SWIGTYPE_p_b2Fixture,  0 );
  result = rb_funcall(swig_get_self(), rb_intern("report_fixture"), 1,obj0);
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_B2QueryCallback::ReportParticle(b2ParticleSystem const *particleSystem, int32 index) {
  bool c_result = SwigValueInit< bool >() ;
  VALUE obj0 = Qnil ;
  VALUE obj1 = Qnil ;
  VALUE SWIGUNUSED result;
  
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(particleSystem), SWIGTYPE_p_b2ParticleSystem,  0 );
  obj1 = SWIG_From_int(static_cast< int >(index));
  result = rb_funcall(swig_get_self(), rb_intern("report_particle"), 2,obj0,obj1);
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


/*
  Document-class: Liquidfun::B2Version

  Proxy of C++ Liquidfun::B2Version class


*/
static swig_class SwigClassB2Version;

/*
  Document-method: Liquidfun::B2Version.major

  call-seq:
    major -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Version.major=

  call-seq:
    major=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Version_major_set(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","major", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","major", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->major = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Version_major_get(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","major", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  result = (int32) ((arg1)->major);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Version.minor

  call-seq:
    minor -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Version.minor=

  call-seq:
    minor=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Version_minor_set(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","minor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","minor", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->minor = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Version_minor_get(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","minor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  result = (int32) ((arg1)->minor);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Version.revision

  call-seq:
    revision -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Version.revision=

  call-seq:
    revision=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Version_revision_set(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","revision", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","revision", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->revision = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Version_revision_get(int argc, VALUE *argv, VALUE self) {
  b2Version *arg1 = (b2Version *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Version *","revision", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Version * >(argp1);
  result = (int32) ((arg1)->revision);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Version_allocate(VALUE self)
#else
_wrap_B2Version_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Version);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Version.new

  call-seq:
    B2Version.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Version(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Version";
  b2Version *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Version *)new b2Version();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Version(void *self) {
    b2Version *arg1 = (b2Version *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2MassData

  Proxy of C++ Liquidfun::B2MassData class


*/
static swig_class SwigClassB2MassData;

/*
  Document-method: Liquidfun::B2MassData.mass

  call-seq:
    mass -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MassData.mass=

  call-seq:
    mass=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MassData_mass_set(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","mass", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","mass", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->mass = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MassData_mass_get(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","mass", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  result = (float32) ((arg1)->mass);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MassData.center

  call-seq:
    center -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MassData.center=

  call-seq:
    center=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MassData_center_set(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","center", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","center", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","center", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->center = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MassData_center_get(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","center", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  result = (b2Vec2 *) & ((arg1)->center);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MassData.I

  call-seq:
    I -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MassData.I=

  call-seq:
    I=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MassData_I_set(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","I", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","I", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->I = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MassData_I_get(int argc, VALUE *argv, VALUE self) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MassData *","I", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MassData * >(argp1);
  result = (float32) ((arg1)->I);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2MassData(void *self) {
    b2MassData *arg1 = (b2MassData *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Shape

  Proxy of C++ Liquidfun::B2Shape class


*/
static swig_class SwigClassB2Shape;

/*
  Document-method: Liquidfun::Type.CIRCLE

  call-seq:
    CIRCLE -> int

A class method.

*/
/*
  Document-method: Liquidfun::Type.EDGE

  call-seq:
    EDGE -> int

A class method.

*/
/*
  Document-method: Liquidfun::Type.POLYGON

  call-seq:
    POLYGON -> int

A class method.

*/
/*
  Document-method: Liquidfun::Type.CHAIN

  call-seq:
    CHAIN -> int

A class method.

*/
/*
  Document-method: Liquidfun::Type.E_TYPECOUNT

  call-seq:
    E_TYPECOUNT -> int

A class method.

*/
SWIGINTERN void
free_b2Shape(void *self) {
    b2Shape *arg1 = (b2Shape *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun::B2Shape.get_child_count

  call-seq:
    get_child_count -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Shape_get_child_count(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape const *","GetChildCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  {
    try {
      result = (int32)((b2Shape const *)arg1)->GetChildCount();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Shape.test_point

  call-seq:
    test_point(B2Transform xf, B2Vec2 p) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Shape_test_point(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape const *","TestPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Transform const &","TestPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Transform const &","TestPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Vec2 const &","TestPoint", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","TestPoint", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Vec2 * >(argp3);
  {
    try {
      result = (bool)((b2Shape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Shape.compute_mass

  call-seq:
    compute_mass(B2MassData massData, float32 density)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Shape_compute_mass(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape const *","ComputeMass", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2MassData *","ComputeMass", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2MassData * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","ComputeMass", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      ((b2Shape const *)arg1)->ComputeMass(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Shape.m_type

  call-seq:
    m_type -> int

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Shape.m_type=

  call-seq:
    m_type=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Shape_m_type_set(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "b2Shape::Type","m_type", 2, argv[0] ));
  } 
  arg2 = static_cast< b2Shape::Type >(val2);
  if (arg1) (arg1)->m_type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Shape_m_type_get(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  result = (b2Shape::Type) ((arg1)->m_type);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Shape.m_radius

  call-seq:
    m_radius -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Shape.m_radius=

  call-seq:
    m_radius=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Shape_m_radius_set(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape *","m_radius", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","m_radius", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->m_radius = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Shape_m_radius_get(int argc, VALUE *argv, VALUE self) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Shape *","m_radius", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Shape * >(argp1);
  result = (float32) ((arg1)->m_radius);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2CircleShape < Liquidfun::B2Shape

  Proxy of C++ Liquidfun::B2CircleShape class


*/
static swig_class SwigClassB2CircleShape;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2CircleShape_allocate(VALUE self)
#else
_wrap_B2CircleShape_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2CircleShape);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2CircleShape.new

  call-seq:
    B2CircleShape.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2CircleShape(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2CircleShape";
  b2CircleShape *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2CircleShape *)new b2CircleShape();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2CircleShape.set_position

  call-seq:
    set_position(float32 x, float32 y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2CircleShape_set_position(int argc, VALUE *argv, VALUE self) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2CircleShape *","SetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< b2CircleShape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetPosition", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetPosition(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2CircleShape.get_position_x

  call-seq:
    get_position_x -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2CircleShape_get_position_x(int argc, VALUE *argv, VALUE self) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2CircleShape *","GetPositionX", 1, self )); 
  }
  arg1 = reinterpret_cast< b2CircleShape * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetPositionX();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2CircleShape.get_position_y

  call-seq:
    get_position_y -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2CircleShape_get_position_y(int argc, VALUE *argv, VALUE self) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2CircleShape *","GetPositionY", 1, self )); 
  }
  arg1 = reinterpret_cast< b2CircleShape * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetPositionY();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2CircleShape(void *self) {
    b2CircleShape *arg1 = (b2CircleShape *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2EdgeShape < Liquidfun::B2Shape

  Proxy of C++ Liquidfun::B2EdgeShape class


*/
static swig_class SwigClassB2EdgeShape;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2EdgeShape_allocate(VALUE self)
#else
_wrap_B2EdgeShape_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2EdgeShape);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2EdgeShape.new

  call-seq:
    B2EdgeShape.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2EdgeShape(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2EdgeShape";
  b2EdgeShape *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2EdgeShape *)new b2EdgeShape();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2EdgeShape.set

  call-seq:
    set(float32 vx1, float32 vy1, float32 vx2, float32 vy2)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2EdgeShape_set(int argc, VALUE *argv, VALUE self) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  float32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2EdgeShape *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< b2EdgeShape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float32","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< float32 >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float32","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< float32 >(val5);
  {
    try {
      (arg1)->Set(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2EdgeShape(void *self) {
    b2EdgeShape *arg1 = (b2EdgeShape *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2PolygonShape < Liquidfun::B2Shape

  Proxy of C++ Liquidfun::B2PolygonShape class


*/
static swig_class SwigClassB2PolygonShape;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2PolygonShape_allocate(VALUE self)
#else
_wrap_B2PolygonShape_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2PolygonShape);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2PolygonShape.new

  call-seq:
    B2PolygonShape.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2PolygonShape(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2PolygonShape";
  b2PolygonShape *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2PolygonShape *)new b2PolygonShape();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2PolygonShape.set_as_box

  call-seq:
    set_as_box(float32 hx, float32 hy)
    set_as_box(float32 hx, float32 hy, float32 centerX, float32 centerY, float32 angle)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2PolygonShape_set_as_box__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2PolygonShape *","SetAsBox", 1, self )); 
  }
  arg1 = reinterpret_cast< b2PolygonShape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetAsBox", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetAsBox", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetAsBox(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2PolygonShape.set_centroid

  call-seq:
    set_centroid(float32 x, float32 y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2PolygonShape_set_centroid(int argc, VALUE *argv, VALUE self) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2PolygonShape *","SetCentroid", 1, self )); 
  }
  arg1 = reinterpret_cast< b2PolygonShape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetCentroid", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetCentroid", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetCentroid(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2PolygonShape.set_as_box

  call-seq:
    set_as_box(float32 hx, float32 hy)
    set_as_box(float32 hx, float32 hy, float32 centerX, float32 centerY, float32 angle)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2PolygonShape_set_as_box__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  float32 arg5 ;
  float32 arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2PolygonShape *","SetAsBox", 1, self )); 
  }
  arg1 = reinterpret_cast< b2PolygonShape * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetAsBox", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetAsBox", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float32","SetAsBox", 4, argv[2] ));
  } 
  arg4 = static_cast< float32 >(val4);
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "float32","SetAsBox", 5, argv[3] ));
  } 
  arg5 = static_cast< float32 >(val5);
  ecode6 = SWIG_AsVal_float(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "float32","SetAsBox", 6, argv[4] ));
  } 
  arg6 = static_cast< float32 >(val6);
  {
    try {
      (arg1)->SetAsBox(arg2,arg3,arg4,arg5,arg6);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2PolygonShape_set_as_box(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2PolygonShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_B2PolygonShape_set_as_box__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2PolygonShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_B2PolygonShape_set_as_box__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "B2PolygonShape.set_as_box", 
    "    void B2PolygonShape.set_as_box(float32 hx, float32 hy)\n"
    "    void B2PolygonShape.set_as_box(float32 hx, float32 hy, float32 centerX, float32 centerY, float32 angle)\n");
  
  return Qnil;
}


SWIGINTERN void
free_b2PolygonShape(void *self) {
    b2PolygonShape *arg1 = (b2PolygonShape *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Color

  Proxy of C++ Liquidfun::B2Color class


*/
static swig_class SwigClassB2Color;

/*
  Document-method: Liquidfun::B2Color.new

  call-seq:
    B2Color.new
    B2Color.new(float32 r, float32 g, float32 b)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Color__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Color";
  b2Color *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Color *)new b2Color();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Color_allocate(VALUE self)
#else
_wrap_B2Color_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Color);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Color.new

  call-seq:
    B2Color.new()
    B2Color.new(float32 r, float32 g, float32 b)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Color__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2Color";
  b2Color *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float32","b2Color", 1, argv[0] ));
  } 
  arg1 = static_cast< float32 >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","b2Color", 2, argv[1] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","b2Color", 3, argv[2] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      result = (b2Color *)new b2Color(arg1,arg2,arg3);
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_B2Color(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_B2Color__SWIG_0(nargs, args, self);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_B2Color__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "b2Color.new", 
    "    b2Color.new()\n"
    "    b2Color.new(float32 r, float32 g, float32 b)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Color.set

  call-seq:
    set(float32 ri, float32 gi, float32 bi)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Color_set(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float32","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< float32 >(val4);
  {
    try {
      (arg1)->Set(arg2,arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Color.r

  call-seq:
    r -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Color.r=

  call-seq:
    r=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Color_r_set(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","r", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->r = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Color_r_get(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  result = (float32) ((arg1)->r);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Color.g

  call-seq:
    g -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Color.g=

  call-seq:
    g=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Color_g_set(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","g", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->g = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Color_g_get(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  result = (float32) ((arg1)->g);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Color.b

  call-seq:
    b -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Color.b=

  call-seq:
    b=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Color_b_set(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","b", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->b = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Color_b_get(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = (b2Color *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Color, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  result = (float32) ((arg1)->b);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Color(void *self) {
    b2Color *arg1 = (b2Color *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Draw

  Proxy of C++ Liquidfun::B2Draw class


*/
static swig_class SwigClassB2Draw;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Draw_allocate(VALUE self)
#else
_wrap_B2Draw_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Draw);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Draw.new

  call-seq:
    B2Draw.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Draw(int argc, VALUE *argv, VALUE self) {
  VALUE arg1 = (VALUE) 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2Draw";
  b2Draw *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  arg1 = self;
  {
    try {
      if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (b2Draw *)new SwigDirector_B2Draw(arg1); 
      } else {
        rb_raise(rb_eNameError,"accessing abstract class or protected constructor"); 
        return Qnil;
      }
      
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Draw(void *self) {
    b2Draw *arg1 = (b2Draw *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun.SHAPE_BIT

  call-seq:
    SHAPE_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun.JOINT_BIT

  call-seq:
    JOINT_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun.AABB_BIT

  call-seq:
    AABB_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun.PAIR_BIT

  call-seq:
    PAIR_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun.CENTER_OF_MASS_BIT

  call-seq:
    CENTER_OF_MASS_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun.PARTICLE_BIT

  call-seq:
    PARTICLE_BIT -> int

A class method.

*/
/*
  Document-method: Liquidfun::B2Draw.set_flags

  call-seq:
    set_flags(uint32 flags)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_set_flags(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","SetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","SetFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try {
      (arg1)->SetFlags(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.get_flags

  call-seq:
    get_flags -> uint32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_get_flags(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw const *","GetFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  {
    try {
      result = (uint32)((b2Draw const *)arg1)->GetFlags();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.append_flags

  call-seq:
    append_flags(uint32 flags)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_append_flags(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","AppendFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","AppendFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try {
      (arg1)->AppendFlags(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.clear_flags

  call-seq:
    clear_flags(uint32 flags)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_clear_flags(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","ClearFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","ClearFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  {
    try {
      (arg1)->ClearFlags(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_polygon

  call-seq:
    draw_polygon(B2Vec2 vertices, int32 vertexCount, B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_polygon(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawPolygon", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const *","DrawPolygon", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","DrawPolygon", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Color const &","DrawPolygon", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","DrawPolygon", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Color * >(argp4);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawPolygon");
        } else {
          (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_solid_polygon

  call-seq:
    draw_solid_polygon(B2Vec2 vertices, int32 vertexCount, B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_solid_polygon(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawSolidPolygon", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const *","DrawSolidPolygon", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","DrawSolidPolygon", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Color const &","DrawSolidPolygon", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","DrawSolidPolygon", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Color * >(argp4);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSolidPolygon");
        } else {
          (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_circle

  call-seq:
    draw_circle(B2Vec2 center, float32 radius, B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_circle(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Color *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawCircle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","DrawCircle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","DrawCircle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","DrawCircle", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Color const &","DrawCircle", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","DrawCircle", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Color * >(argp4);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawCircle");
        } else {
          (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_solid_circle

  call-seq:
    draw_solid_circle(B2Vec2 center, float32 radius, B2Vec2 axis, B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_solid_circle(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Vec2 *arg4 = 0 ;
  b2Color *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawSolidCircle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","DrawSolidCircle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","DrawSolidCircle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","DrawSolidCircle", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Vec2 const &","DrawSolidCircle", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","DrawSolidCircle", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Vec2 * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "b2Color const &","DrawSolidCircle", 5, argv[3] )); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","DrawSolidCircle", 5, argv[3])); 
  }
  arg5 = reinterpret_cast< b2Color * >(argp5);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSolidCircle");
        } else {
          (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_particles

  call-seq:
    draw_particles(B2Vec2 centers, float32 radius, B2ParticleColor colors, int32 count)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_particles(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  float32 arg3 ;
  b2ParticleColor *arg4 = (b2ParticleColor *) 0 ;
  int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawParticles", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const *","DrawParticles", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","DrawParticles", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2ParticleColor const *","DrawParticles", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< b2ParticleColor * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int32","DrawParticles", 5, argv[3] ));
  } 
  arg5 = static_cast< int32 >(val5);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawParticles");
        } else {
          (arg1)->DrawParticles((b2Vec2 const *)arg2,arg3,(b2ParticleColor const *)arg4,arg5);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_segment

  call-seq:
    draw_segment(B2Vec2 p1, B2Vec2 p2, B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_segment(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Color *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawSegment", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","DrawSegment", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","DrawSegment", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Vec2 const &","DrawSegment", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","DrawSegment", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Vec2 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Color const &","DrawSegment", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","DrawSegment", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Color * >(argp4);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawSegment");
        } else {
          (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Draw.draw_transform

  call-seq:
    draw_transform(B2Transform xf)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Draw_draw_transform(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","DrawTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Transform const &","DrawTransform", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Transform const &","DrawTransform", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Transform * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2Draw::DrawTransform");
        } else {
          (arg1)->DrawTransform((b2Transform const &)*arg2);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_disown_B2Draw(int argc, VALUE *argv, VALUE self) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Draw *","disown_B2Draw", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< b2Draw * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2Vec2

  Proxy of C++ Liquidfun::B2Vec2 class


*/
static swig_class SwigClassB2Vec2;

/*
  Document-method: Liquidfun::B2Vec2.new

  call-seq:
    B2Vec2.new
    B2Vec2.new(float32 x, float32 y)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Vec2__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Vec2";
  b2Vec2 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Vec2 *)new b2Vec2();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Vec2_allocate(VALUE self)
#else
_wrap_B2Vec2_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Vec2);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Vec2.new

  call-seq:
    B2Vec2.new()
    B2Vec2.new(float32 x, float32 y)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Vec2__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float32 arg1 ;
  float32 arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2Vec2";
  b2Vec2 *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float32","b2Vec2", 1, argv[0] ));
  } 
  arg1 = static_cast< float32 >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","b2Vec2", 2, argv[1] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (b2Vec2 *)new b2Vec2(arg1,arg2);
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_B2Vec2(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_B2Vec2__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_B2Vec2__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "b2Vec2.new", 
    "    b2Vec2.new()\n"
    "    b2Vec2.new(float32 x, float32 y)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Vec2.set

  call-seq:
    set(float32 x_, float32 y_)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Vec2_set(int argc, VALUE *argv, VALUE self) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Vec2 *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->Set(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Vec2.x

  call-seq:
    x -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Vec2.x=

  call-seq:
    x=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Vec2_x_set(int argc, VALUE *argv, VALUE self) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Vec2 *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","x", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->x = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Vec2_x_get(int argc, VALUE *argv, VALUE self) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Vec2 *","x", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Vec2 * >(argp1);
  result = (float32) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Vec2.y

  call-seq:
    y -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Vec2.y=

  call-seq:
    y=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Vec2_y_set(int argc, VALUE *argv, VALUE self) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Vec2 *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Vec2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","y", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Vec2_y_get(int argc, VALUE *argv, VALUE self) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Vec2 *","y", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Vec2 * >(argp1);
  result = (float32) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Vec2(void *self) {
    b2Vec2 *arg1 = (b2Vec2 *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Transform

  Proxy of C++ Liquidfun::B2Transform class


*/
static swig_class SwigClassB2Transform;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Transform_allocate(VALUE self)
#else
_wrap_B2Transform_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Transform);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Transform.new

  call-seq:
    B2Transform.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Transform(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Transform";
  b2Transform *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Transform *)new b2Transform();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Transform.set_identity

  call-seq:
    set_identity

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Transform_set_identity(int argc, VALUE *argv, VALUE self) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Transform *","SetIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Transform * >(argp1);
  {
    try {
      (arg1)->SetIdentity();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Transform.get_position_x

  call-seq:
    get_position_x -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Transform_get_position_x(int argc, VALUE *argv, VALUE self) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Transform *","GetPositionX", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Transform * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetPositionX();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Transform.get_position_y

  call-seq:
    get_position_y -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Transform_get_position_y(int argc, VALUE *argv, VALUE self) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Transform *","GetPositionY", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Transform * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetPositionY();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Transform.get_rotation_sin

  call-seq:
    get_rotation_sin -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Transform_get_rotation_sin(int argc, VALUE *argv, VALUE self) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Transform *","GetRotationSin", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Transform * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetRotationSin();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Transform.get_rotation_cos

  call-seq:
    get_rotation_cos -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Transform_get_rotation_cos(int argc, VALUE *argv, VALUE self) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Transform *","GetRotationCos", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Transform * >(argp1);
  {
    try {
      result = (float32)(arg1)->GetRotationCos();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Transform(void *self) {
    b2Transform *arg1 = (b2Transform *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2BodyDef

  Proxy of C++ Liquidfun::B2BodyDef class


*/
static swig_class SwigClassB2BodyDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2BodyDef_allocate(VALUE self)
#else
_wrap_B2BodyDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2BodyDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2BodyDef.new

  call-seq:
    B2BodyDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2BodyDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2BodyDef";
  b2BodyDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2BodyDef *)new b2BodyDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.set_position

  call-seq:
    set_position(float32 positionX, float32 positionY)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_set_position(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","SetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetPosition", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetPosition(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.type

  call-seq:
    type -> int

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.type=

  call-seq:
    type=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_type_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2BodyType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "b2BodyType","type", 2, argv[0] ));
  } 
  arg2 = static_cast< b2BodyType >(val2);
  if (arg1) (arg1)->type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_type_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2BodyType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (b2BodyType) ((arg1)->type);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.position

  call-seq:
    position -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.position=

  call-seq:
    position=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_position_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","position", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","position", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_position_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->position);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.angle

  call-seq:
    angle -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.angle=

  call-seq:
    angle=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_angle_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angle", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_angle_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (float32) ((arg1)->angle);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.linearVelocity

  call-seq:
    linearVelocity -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.linearVelocity=

  call-seq:
    linearVelocity=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_linearVelocity_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","linearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","linearVelocity", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","linearVelocity", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->linearVelocity = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_linearVelocity_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","linearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->linearVelocity);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.angularVelocity

  call-seq:
    angularVelocity -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.angularVelocity=

  call-seq:
    angularVelocity=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_angularVelocity_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularVelocity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularVelocity = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_angularVelocity_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (float32) ((arg1)->angularVelocity);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.linearDamping

  call-seq:
    linearDamping -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.linearDamping=

  call-seq:
    linearDamping=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_linearDamping_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","linearDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","linearDamping", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->linearDamping = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_linearDamping_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","linearDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (float32) ((arg1)->linearDamping);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.angularDamping

  call-seq:
    angularDamping -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.angularDamping=

  call-seq:
    angularDamping=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_angularDamping_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angularDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularDamping", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularDamping = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_angularDamping_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","angularDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (float32) ((arg1)->angularDamping);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.allowSleep

  call-seq:
    allowSleep -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.allowSleep=

  call-seq:
    allowSleep=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_allowSleep_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","allowSleep", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","allowSleep", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->allowSleep = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_allowSleep_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","allowSleep", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (bool) ((arg1)->allowSleep);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.awake

  call-seq:
    awake -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.awake=

  call-seq:
    awake=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_awake_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","awake", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","awake", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->awake = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_awake_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","awake", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (bool) ((arg1)->awake);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.fixedRotation

  call-seq:
    fixedRotation -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.fixedRotation=

  call-seq:
    fixedRotation=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_fixedRotation_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","fixedRotation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","fixedRotation", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->fixedRotation = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_fixedRotation_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","fixedRotation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (bool) ((arg1)->fixedRotation);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.bullet

  call-seq:
    bullet -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.bullet=

  call-seq:
    bullet=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_bullet_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","bullet", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","bullet", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->bullet = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_bullet_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","bullet", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (bool) ((arg1)->bullet);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.active

  call-seq:
    active -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.active=

  call-seq:
    active=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_active_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","active", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","active", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->active = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_active_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","active", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (bool) ((arg1)->active);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2BodyDef.gravityScale

  call-seq:
    gravityScale -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2BodyDef.gravityScale=

  call-seq:
    gravityScale=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2BodyDef_gravityScale_set(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","gravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","gravityScale", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->gravityScale = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2BodyDef_gravityScale_get(int argc, VALUE *argv, VALUE self) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2BodyDef *","gravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2BodyDef * >(argp1);
  result = (float32) ((arg1)->gravityScale);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2BodyDef(void *self) {
    b2BodyDef *arg1 = (b2BodyDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Body

  Proxy of C++ Liquidfun::B2Body class


*/
static swig_class SwigClassB2Body;

/*
  Document-method: Liquidfun::B2Body.create_fixture

  call-seq:
    create_fixture(B2FixtureDef C_def) -> B2Fixture
    create_fixture(B2Shape shape, float32 density) -> B2Fixture

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_create_fixture__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2FixtureDef *arg2 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","CreateFixture", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2FixtureDef const *","CreateFixture", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2FixtureDef * >(argp2);
  {
    try {
      result = (b2Fixture *)(arg1)->CreateFixture((b2FixtureDef const *)arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_create_fixture__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","CreateFixture", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Shape const *","CreateFixture", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Shape * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","CreateFixture", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      result = (b2Fixture *)(arg1)->CreateFixture((b2Shape const *)arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_create_fixture(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2FixtureDef, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_B2Body_create_fixture__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2Shape, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_B2Body_create_fixture__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "B2Body.create_fixture", 
    "    b2Fixture B2Body.create_fixture(b2FixtureDef const *def)\n"
    "    b2Fixture * B2Body.create_fixture(b2Shape const *shape, float32 density)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.destroy_fixture

  call-seq:
    destroy_fixture(B2Fixture fixture)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_destroy_fixture(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","DestroyFixture", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Fixture *","DestroyFixture", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Fixture * >(argp2);
  {
    try {
      (arg1)->DestroyFixture(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_transform

  call-seq:
    set_transform(B2Vec2 position, float32 angle)
    set_transform(float32 positionX, float32 positionY, float32 angle)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_transform__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","SetTransform", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","SetTransform", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetTransform", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetTransform((b2Vec2 const &)*arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_transform

  call-seq:
    get_transform -> B2Transform

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_transform(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Transform *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Transform *) &((b2Body const *)arg1)->GetTransform();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Transform, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_position

  call-seq:
    get_position -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_position(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2Body const *)arg1)->GetPosition();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_angle

  call-seq:
    get_angle -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_angle(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetAngle();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_world_center

  call-seq:
    get_world_center -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_world_center(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetWorldCenter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2Body const *)arg1)->GetWorldCenter();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_local_center

  call-seq:
    get_local_center -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_local_center(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLocalCenter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2Body const *)arg1)->GetLocalCenter();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_linear_velocity

  call-seq:
    set_linear_velocity(B2Vec2 v)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_linear_velocity(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetLinearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","SetLinearVelocity", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","SetLinearVelocity", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      (arg1)->SetLinearVelocity((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_linear_velocity

  call-seq:
    get_linear_velocity -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_linear_velocity(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLinearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2Body const *)arg1)->GetLinearVelocity();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_angular_velocity

  call-seq:
    set_angular_velocity(float32 omega)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_angular_velocity(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetAngularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetAngularVelocity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetAngularVelocity(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_angular_velocity

  call-seq:
    get_angular_velocity -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_angular_velocity(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetAngularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetAngularVelocity();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.apply_force

  call-seq:
    apply_force(B2Vec2 force, B2Vec2 point, bool wake)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_apply_force(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ApplyForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","ApplyForce", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ApplyForce", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Vec2 const &","ApplyForce", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ApplyForce", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Vec2 * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","ApplyForce", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.apply_force_to_center

  call-seq:
    apply_force_to_center(B2Vec2 force, bool wake)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_apply_force_to_center(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ApplyForceToCenter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","ApplyForceToCenter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ApplyForceToCenter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ApplyForceToCenter", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->ApplyForceToCenter((b2Vec2 const &)*arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.apply_torque

  call-seq:
    apply_torque(float32 torque, bool wake)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_apply_torque(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ApplyTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","ApplyTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ApplyTorque", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->ApplyTorque(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.apply_linear_impulse

  call-seq:
    apply_linear_impulse(B2Vec2 impulse, B2Vec2 point, bool wake)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_apply_linear_impulse(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ApplyLinearImpulse", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","ApplyLinearImpulse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ApplyLinearImpulse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Vec2 const &","ApplyLinearImpulse", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ApplyLinearImpulse", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Vec2 * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","ApplyLinearImpulse", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->ApplyLinearImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.apply_angular_impulse

  call-seq:
    apply_angular_impulse(float32 impulse, bool wake)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_apply_angular_impulse(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ApplyAngularImpulse", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","ApplyAngularImpulse", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","ApplyAngularImpulse", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->ApplyAngularImpulse(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_mass

  call-seq:
    get_mass -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_mass(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetMass", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetMass();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_inertia

  call-seq:
    get_inertia -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_inertia(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetInertia", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetInertia();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_mass_data

  call-seq:
    get_mass_data(B2MassData data)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_mass_data(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetMassData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2MassData *","GetMassData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2MassData * >(argp2);
  {
    try {
      ((b2Body const *)arg1)->GetMassData(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_mass_data

  call-seq:
    set_mass_data(B2MassData data)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_mass_data(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetMassData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2MassData const *","SetMassData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2MassData * >(argp2);
  {
    try {
      (arg1)->SetMassData((b2MassData const *)arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.reset_mass_data

  call-seq:
    reset_mass_data

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_reset_mass_data(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","ResetMassData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      (arg1)->ResetMassData();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_world_point

  call-seq:
    get_world_point(B2Vec2 localPoint) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_world_point(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetWorldPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetWorldPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetWorldPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_world_vector

  call-seq:
    get_world_vector(B2Vec2 localVector) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_world_vector(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetWorldVector", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetWorldVector", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetWorldVector", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_local_point

  call-seq:
    get_local_point(B2Vec2 worldPoint) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_local_point(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLocalPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetLocalPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetLocalPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_local_vector

  call-seq:
    get_local_vector(B2Vec2 worldVector) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_local_vector(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLocalVector", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetLocalVector", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetLocalVector", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_linear_velocity_from_world_point

  call-seq:
    get_linear_velocity_from_world_point(B2Vec2 worldPoint) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_linear_velocity_from_world_point(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLinearVelocityFromWorldPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetLinearVelocityFromWorldPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetLinearVelocityFromWorldPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_linear_velocity_from_local_point

  call-seq:
    get_linear_velocity_from_local_point(B2Vec2 localPoint) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_linear_velocity_from_local_point(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLinearVelocityFromLocalPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","GetLinearVelocityFromLocalPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","GetLinearVelocityFromLocalPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_linear_damping

  call-seq:
    get_linear_damping -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_linear_damping(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetLinearDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetLinearDamping();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_linear_damping

  call-seq:
    set_linear_damping(float32 linearDamping)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_linear_damping(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetLinearDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetLinearDamping", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetLinearDamping(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_angular_damping

  call-seq:
    get_angular_damping -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_angular_damping(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetAngularDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetAngularDamping();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_angular_damping

  call-seq:
    set_angular_damping(float32 angularDamping)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_angular_damping(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetAngularDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetAngularDamping", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetAngularDamping(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_gravity_scale

  call-seq:
    get_gravity_scale -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_gravity_scale(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetGravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetGravityScale();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_gravity_scale

  call-seq:
    set_gravity_scale(float32 scale)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_gravity_scale(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetGravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetGravityScale", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetGravityScale(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_type

  call-seq:
    set_type(b2BodyType type)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_type(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetType", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "b2BodyType","SetType", 2, argv[0] ));
  } 
  arg2 = static_cast< b2BodyType >(val2);
  {
    try {
      (arg1)->SetType(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_type

  call-seq:
    get_type -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_type(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2BodyType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2BodyType)((b2Body const *)arg1)->GetType();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_bullet

  call-seq:
    set_bullet(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_bullet(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetBullet", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetBullet", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetBullet(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.is_bullet

  call-seq:
    is_bullet -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_is_bullet(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","IsBullet", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (bool)((b2Body const *)arg1)->IsBullet();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_sleeping_allowed

  call-seq:
    set_sleeping_allowed(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_sleeping_allowed(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetSleepingAllowed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetSleepingAllowed", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetSleepingAllowed(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.is_sleeping_allowed

  call-seq:
    is_sleeping_allowed -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_is_sleeping_allowed(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","IsSleepingAllowed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (bool)((b2Body const *)arg1)->IsSleepingAllowed();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_awake

  call-seq:
    set_awake(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_awake(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetAwake", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetAwake", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetAwake(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.is_awake

  call-seq:
    is_awake -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_is_awake(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","IsAwake", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (bool)((b2Body const *)arg1)->IsAwake();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_active

  call-seq:
    set_active(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_active(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetActive", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetActive", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetActive(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.is_active

  call-seq:
    is_active -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_is_active(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","IsActive", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (bool)((b2Body const *)arg1)->IsActive();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_fixed_rotation

  call-seq:
    set_fixed_rotation(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_fixed_rotation(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetFixedRotation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetFixedRotation", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetFixedRotation(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.is_fixed_rotation

  call-seq:
    is_fixed_rotation -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_is_fixed_rotation(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","IsFixedRotation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (bool)((b2Body const *)arg1)->IsFixedRotation();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_fixture_list

  call-seq:
    get_fixture_list -> B2Fixture
    get_fixture_list -> B2Fixture

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_fixture_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","GetFixtureList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Fixture *)(arg1)->GetFixtureList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_get_fixture_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetFixtureList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Fixture *)((b2Body const *)arg1)->GetFixtureList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_get_fixture_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_fixture_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_fixture_list__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Body.get_fixture_list", 
    "    b2Fixture B2Body.get_fixture_list()\n"
    "    b2Fixture const * B2Body.get_fixture_list()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_joint_list

  call-seq:
    get_joint_list -> B2JointEdge
    get_joint_list -> B2JointEdge

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_joint_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","GetJointList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2JointEdge *)(arg1)->GetJointList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_get_joint_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetJointList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2JointEdge *)((b2Body const *)arg1)->GetJointList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_get_joint_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_joint_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_joint_list__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Body.get_joint_list", 
    "    b2JointEdge B2Body.get_joint_list()\n"
    "    b2JointEdge const * B2Body.get_joint_list()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_contact_list

  call-seq:
    get_contact_list -> b2ContactEdge *
    get_contact_list -> b2ContactEdge const

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_contact_list__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ContactEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","GetContactList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2ContactEdge *)(arg1)->GetContactList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_get_contact_list__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ContactEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetContactList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2ContactEdge *)((b2Body const *)arg1)->GetContactList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_get_contact_list(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_contact_list__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_contact_list__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Body.get_contact_list", 
    "    b2ContactEdge B2Body.get_contact_list()\n"
    "    b2ContactEdge const * B2Body.get_contact_list()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_next

  call-seq:
    get_next -> B2Body
    get_next -> B2Body

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Body *)(arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_get_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2Body *)((b2Body const *)arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_get_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_next__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_next__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Body.get_next", 
    "    b2Body B2Body.get_next()\n"
    "    b2Body const * B2Body.get_next()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_world

  call-seq:
    get_world -> B2World
    get_world -> B2World

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_world__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2World *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","GetWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2World *)(arg1)->GetWorld();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Body_get_world__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2World *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (b2World *)((b2Body const *)arg1)->GetWorld();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_get_world(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_world__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Body_get_world__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Body.get_world", 
    "    b2World B2Body.get_world()\n"
    "    b2World const * B2Body.get_world()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.dump

  call-seq:
    dump

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_dump(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","Dump", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      (arg1)->Dump();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_position_x

  call-seq:
    get_position_x -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_position_x(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetPositionX", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetPositionX();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.get_position_y

  call-seq:
    get_position_y -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_get_position_y(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body const *","GetPositionY", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  {
    try {
      result = (float32)((b2Body const *)arg1)->GetPositionY();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Body.set_transform

  call-seq:
    set_transform(B2Vec2 position, float32 angle)
    set_transform(float32 positionX, float32 positionY, float32 angle)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Body_set_transform__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Body *","SetTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Body * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetTransform", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetTransform", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float32","SetTransform", 4, argv[2] ));
  } 
  arg4 = static_cast< float32 >(val4);
  {
    try {
      (arg1)->SetTransform(arg2,arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Body_set_transform(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2Vec2, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_B2Body_set_transform__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Body, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_B2Body_set_transform__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "B2Body.set_transform", 
    "    void B2Body.set_transform(b2Vec2 const &position, float32 angle)\n"
    "    void B2Body.set_transform(float32 positionX, float32 positionY, float32 angle)\n");
  
  return Qnil;
}


/*
  Document-class: Liquidfun::B2Filter

  Proxy of C++ Liquidfun::B2Filter class


*/
static swig_class SwigClassB2Filter;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Filter_allocate(VALUE self)
#else
_wrap_B2Filter_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Filter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Filter.new

  call-seq:
    B2Filter.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Filter(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Filter";
  b2Filter *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Filter *)new b2Filter();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Filter.categoryBits

  call-seq:
    categoryBits -> uint16

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Filter.categoryBits=

  call-seq:
    categoryBits=(x) -> uint16

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Filter_categoryBits_set(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","categoryBits", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16","categoryBits", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16 >(val2);
  if (arg1) (arg1)->categoryBits = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Filter_categoryBits_get(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","categoryBits", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  result = (uint16) ((arg1)->categoryBits);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Filter.maskBits

  call-seq:
    maskBits -> uint16

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Filter.maskBits=

  call-seq:
    maskBits=(x) -> uint16

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Filter_maskBits_set(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  uint16 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","maskBits", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint16","maskBits", 2, argv[0] ));
  } 
  arg2 = static_cast< uint16 >(val2);
  if (arg1) (arg1)->maskBits = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Filter_maskBits_get(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","maskBits", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  result = (uint16) ((arg1)->maskBits);
  vresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Filter.groupIndex

  call-seq:
    groupIndex -> int16

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Filter.groupIndex=

  call-seq:
    groupIndex=(x) -> int16

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Filter_groupIndex_set(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  int16 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","groupIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  ecode2 = SWIG_AsVal_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int16","groupIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< int16 >(val2);
  if (arg1) (arg1)->groupIndex = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Filter_groupIndex_get(int argc, VALUE *argv, VALUE self) {
  b2Filter *arg1 = (b2Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int16 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Filter *","groupIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Filter * >(argp1);
  result = (int16) ((arg1)->groupIndex);
  vresult = SWIG_From_short(static_cast< short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Filter(void *self) {
    b2Filter *arg1 = (b2Filter *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2FixtureDef

  Proxy of C++ Liquidfun::B2FixtureDef class


*/
static swig_class SwigClassB2FixtureDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2FixtureDef_allocate(VALUE self)
#else
_wrap_B2FixtureDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2FixtureDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2FixtureDef.new

  call-seq:
    B2FixtureDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2FixtureDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2FixtureDef";
  b2FixtureDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2FixtureDef *)new b2FixtureDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.shape

  call-seq:
    shape -> B2Shape

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.shape=

  call-seq:
    shape=(x) -> B2Shape

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_shape_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Shape const *","shape", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Shape * >(argp2);
  if (arg1) (arg1)->shape = (b2Shape const *)arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_shape_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (b2Shape *) ((arg1)->shape);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Shape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.friction

  call-seq:
    friction -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.friction=

  call-seq:
    friction=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_friction_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","friction", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","friction", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->friction = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_friction_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","friction", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (float32) ((arg1)->friction);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.restitution

  call-seq:
    restitution -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.restitution=

  call-seq:
    restitution=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_restitution_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","restitution", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","restitution", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->restitution = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_restitution_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","restitution", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (float32) ((arg1)->restitution);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.density

  call-seq:
    density -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.density=

  call-seq:
    density=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_density_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","density", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","density", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->density = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_density_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","density", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (float32) ((arg1)->density);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.isSensor

  call-seq:
    isSensor -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.isSensor=

  call-seq:
    isSensor=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_isSensor_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","isSensor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","isSensor", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isSensor = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_isSensor_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","isSensor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (bool) ((arg1)->isSensor);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2FixtureDef.filter

  call-seq:
    filter -> B2Filter

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2FixtureDef.filter=

  call-seq:
    filter=(x) -> B2Filter

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2FixtureDef_filter_set(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","filter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Filter const &","filter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Filter const &","filter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Filter * >(argp2);
  if (arg1) (arg1)->filter = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2FixtureDef_filter_get(int argc, VALUE *argv, VALUE self) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Filter *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2FixtureDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2FixtureDef *","filter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2FixtureDef * >(argp1);
  result = (b2Filter *) & ((arg1)->filter);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Filter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2FixtureDef(void *self) {
    b2FixtureDef *arg1 = (b2FixtureDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Fixture

  Proxy of C++ Liquidfun::B2Fixture class


*/
static swig_class SwigClassB2Fixture;

/*
  Document-method: Liquidfun::B2Fixture.get_type

  call-seq:
    get_type -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_type(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape::Type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Shape::Type)((b2Fixture const *)arg1)->GetType();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_shape

  call-seq:
    get_shape -> B2Shape
    get_shape -> B2Shape

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_shape__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","GetShape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Shape *)(arg1)->GetShape();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Shape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Fixture_get_shape__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetShape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Shape *)((b2Fixture const *)arg1)->GetShape();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Shape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Fixture_get_shape(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_shape__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_shape__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Fixture.get_shape", 
    "    b2Shape B2Fixture.get_shape()\n"
    "    b2Shape const * B2Fixture.get_shape()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.set_sensor

  call-seq:
    set_sensor(bool sensor)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_set_sensor(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","SetSensor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetSensor", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetSensor(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.is_sensor

  call-seq:
    is_sensor -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_is_sensor(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","IsSensor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (bool)((b2Fixture const *)arg1)->IsSensor();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.set_filter_data

  call-seq:
    set_filter_data(B2Filter filter)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_set_filter_data(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Filter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","SetFilterData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Filter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Filter const &","SetFilterData", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Filter const &","SetFilterData", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Filter * >(argp2);
  {
    try {
      (arg1)->SetFilterData((b2Filter const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_filter_data

  call-seq:
    get_filter_data -> B2Filter

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_filter_data(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Filter *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetFilterData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Filter *) &((b2Fixture const *)arg1)->GetFilterData();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Filter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.refilter

  call-seq:
    refilter

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_refilter(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","Refilter", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      (arg1)->Refilter();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_body

  call-seq:
    get_body -> B2Body
    get_body -> B2Body

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_body__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","GetBody", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Body *)(arg1)->GetBody();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Fixture_get_body__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetBody", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Body *)((b2Fixture const *)arg1)->GetBody();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Fixture_get_body(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_body__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_body__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Fixture.get_body", 
    "    b2Body B2Fixture.get_body()\n"
    "    b2Body const * B2Fixture.get_body()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_next

  call-seq:
    get_next -> B2Fixture
    get_next -> B2Fixture

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Fixture *)(arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Fixture_get_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Fixture *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (b2Fixture *)((b2Fixture const *)arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Fixture, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Fixture_get_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_next__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Fixture, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Fixture_get_next__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Fixture.get_next", 
    "    b2Fixture B2Fixture.get_next()\n"
    "    b2Fixture const * B2Fixture.get_next()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.test_point

  call-seq:
    test_point(B2Vec2 p) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_test_point(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","TestPoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","TestPoint", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","TestPoint", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      result = (bool)((b2Fixture const *)arg1)->TestPoint((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.compute_distance

  call-seq:
    compute_distance(B2Vec2 p, float32 * distance, B2Vec2 normal, int32 childIndex)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_compute_distance(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 *arg3 = (float32 *) 0 ;
  b2Vec2 *arg4 = (b2Vec2 *) 0 ;
  int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","ComputeDistance", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","ComputeDistance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ComputeDistance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "float32 *","ComputeDistance", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< float32 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_b2Vec2, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Vec2 *","ComputeDistance", 4, argv[2] )); 
  }
  arg4 = reinterpret_cast< b2Vec2 * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int32","ComputeDistance", 5, argv[3] ));
  } 
  arg5 = static_cast< int32 >(val5);
  {
    try {
      ((b2Fixture const *)arg1)->ComputeDistance((b2Vec2 const &)*arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.ray_cast

  call-seq:
    ray_cast(b2RayCastOutput * output, b2RayCastInput const & input, int32 childIndex) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_ray_cast(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2RayCastOutput *arg2 = (b2RayCastOutput *) 0 ;
  b2RayCastInput *arg3 = 0 ;
  int32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","RayCast", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2RayCastOutput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2RayCastOutput *","RayCast", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2RayCastOutput * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2RayCastInput,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2RayCastInput const &","RayCast", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2RayCastInput const &","RayCast", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2RayCastInput * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int32","RayCast", 4, argv[2] ));
  } 
  arg4 = static_cast< int32 >(val4);
  {
    try {
      result = (bool)((b2Fixture const *)arg1)->RayCast(arg2,(b2RayCastInput const &)*arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_mass_data

  call-seq:
    get_mass_data(B2MassData massData)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_mass_data(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetMassData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2MassData *","GetMassData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2MassData * >(argp2);
  {
    try {
      ((b2Fixture const *)arg1)->GetMassData(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.set_density

  call-seq:
    set_density(float32 density)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_set_density(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","SetDensity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetDensity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetDensity(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_density

  call-seq:
    get_density -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_density(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetDensity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (float32)((b2Fixture const *)arg1)->GetDensity();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_friction

  call-seq:
    get_friction -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_friction(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetFriction", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (float32)((b2Fixture const *)arg1)->GetFriction();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.set_friction

  call-seq:
    set_friction(float32 friction)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_set_friction(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","SetFriction", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetFriction", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetFriction(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_restitution

  call-seq:
    get_restitution -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_restitution(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetRestitution", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  {
    try {
      result = (float32)((b2Fixture const *)arg1)->GetRestitution();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.set_restitution

  call-seq:
    set_restitution(float32 restitution)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_set_restitution(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","SetRestitution", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetRestitution", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetRestitution(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.get_aabb

  call-seq:
    get_aabb(int32 childIndex) -> b2AABB const &

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_get_aabb(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  b2AABB *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture const *","GetAABB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","GetAABB", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  {
    try {
      result = (b2AABB *) &((b2Fixture const *)arg1)->GetAABB(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Fixture.dump

  call-seq:
    dump(int32 bodyIndex)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Fixture_dump(int argc, VALUE *argv, VALUE self) {
  b2Fixture *arg1 = (b2Fixture *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Fixture *","Dump", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Fixture * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","Dump", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  {
    try {
      (arg1)->Dump(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2World

  Proxy of C++ Liquidfun::B2World class


*/
static swig_class SwigClassB2World;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2World_allocate(VALUE self)
#else
_wrap_B2World_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2World);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2World.new

  call-seq:
    B2World.new(float32 gravityX, float32 gravityY)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2World(int argc, VALUE *argv, VALUE self) {
  float32 arg1 ;
  float32 arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2World";
  b2World *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float32","b2World", 1, argv[0] ));
  } 
  arg1 = static_cast< float32 >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","b2World", 2, argv[1] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (b2World *)new b2World(arg1,arg2);
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2World(void *self) {
    b2World *arg1 = (b2World *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun::B2World.set_debug_draw

  call-seq:
    set_debug_draw(B2Draw debugDraw)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_set_debug_draw(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2Draw *arg2 = (b2Draw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","SetDebugDraw", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Draw, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Draw *","SetDebugDraw", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Draw * >(argp2);
  {
    try {
      (arg1)->SetDebugDraw(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.create_body

  call-seq:
    create_body(B2BodyDef C_def) -> B2Body

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_create_body(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2BodyDef *arg2 = (b2BodyDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","CreateBody", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2BodyDef const *","CreateBody", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2BodyDef * >(argp2);
  {
    try {
      result = (b2Body *)(arg1)->CreateBody((b2BodyDef const *)arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.destroy_body

  call-seq:
    destroy_body(B2Body body)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_destroy_body(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","DestroyBody", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","DestroyBody", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  {
    try {
      (arg1)->DestroyBody(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.create_joint

  call-seq:
    create_joint(B2JointDef C_def) -> B2Joint

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_create_joint(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2JointDef *arg2 = (b2JointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  b2Joint *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","CreateJoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2JointDef const *","CreateJoint", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2JointDef * >(argp2);
  {
    try {
      result = (b2Joint *)(arg1)->CreateJoint((b2JointDef const *)arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Joint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.destroy_joint

  call-seq:
    destroy_joint(B2Joint joint)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_destroy_joint(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","DestroyJoint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Joint *","DestroyJoint", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Joint * >(argp2);
  {
    try {
      (arg1)->DestroyJoint(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.step

  call-seq:
    step(float32 timeStep, int32 velocityIterations, int32 positionIterations, int32 particleIterations)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_step(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","Step", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","Step", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","Step", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int32","Step", 4, argv[2] ));
  } 
  arg4 = static_cast< int32 >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int32","Step", 5, argv[3] ));
  } 
  arg5 = static_cast< int32 >(val5);
  {
    try {
      (arg1)->Step(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.draw_debug_data

  call-seq:
    draw_debug_data

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_draw_debug_data(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","DrawDebugData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  {
    try {
      (arg1)->DrawDebugData();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.get_body_count

  call-seq:
    get_body_count -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_get_body_count(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World const *","GetBodyCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  {
    try {
      result = (int32)((b2World const *)arg1)->GetBodyCount();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.create_particle_system

  call-seq:
    create_particle_system(B2ParticleSystemDef C_def) -> B2ParticleSystem

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_create_particle_system(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  b2ParticleSystemDef *arg2 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  b2ParticleSystem *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","CreateParticleSystem", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleSystemDef const *","CreateParticleSystem", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleSystemDef * >(argp2);
  {
    try {
      result = (b2ParticleSystem *)(arg1)->CreateParticleSystem((b2ParticleSystemDef const *)arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleSystem, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2World.set_gravity

  call-seq:
    set_gravity(float32 gravityX, float32 gravityY)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2World_set_gravity(int argc, VALUE *argv, VALUE self) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2World *","SetGravity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2World * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetGravity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetGravity", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetGravity(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2QueryCallback

  Proxy of C++ Liquidfun::B2QueryCallback class


*/
static swig_class SwigClassB2QueryCallback;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2QueryCallback_allocate(VALUE self)
#else
_wrap_B2QueryCallback_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2QueryCallback);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2QueryCallback.new

  call-seq:
    B2QueryCallback.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2QueryCallback(int argc, VALUE *argv, VALUE self) {
  VALUE arg1 = (VALUE) 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2QueryCallback";
  b2QueryCallback *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  arg1 = self;
  {
    try {
      if ( strcmp(rb_obj_classname(self), classname) != 0 ) {
        /* subclassed */
        result = (b2QueryCallback *)new SwigDirector_B2QueryCallback(arg1); 
      } else {
        rb_raise(rb_eNameError,"accessing abstract class or protected constructor"); 
        return Qnil;
      }
      
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2QueryCallback(void *self) {
    b2QueryCallback *arg1 = (b2QueryCallback *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun::B2QueryCallback.report_fixture

  call-seq:
    report_fixture(B2Fixture fixture) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2QueryCallback_report_fixture(int argc, VALUE *argv, VALUE self) {
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2QueryCallback *","ReportFixture", 1, self )); 
  }
  arg1 = reinterpret_cast< b2QueryCallback * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Fixture, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Fixture *","ReportFixture", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Fixture * >(argp2);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("b2QueryCallback::ReportFixture");
        } else {
          result = (bool)(arg1)->ReportFixture(arg2);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2QueryCallback.report_particle

  call-seq:
    report_particle(B2ParticleSystem particleSystem, int32 index) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2QueryCallback_report_particle(int argc, VALUE *argv, VALUE self) {
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2ParticleSystem *arg2 = (b2ParticleSystem *) 0 ;
  int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2QueryCallback *","ReportParticle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2QueryCallback * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleSystem const *","ReportParticle", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleSystem * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","ReportParticle", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  director = dynamic_cast<Swig::Director *>(arg1);
  upcall = (director && (director->swig_get_self() == self));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->b2QueryCallback::ReportParticle((b2ParticleSystem const *)arg2,arg3);
        } else {
          result = (bool)(arg1)->ReportParticle((b2ParticleSystem const *)arg2,arg3);
        }
      }
      catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  } catch (Swig::DirectorException& e) {
    rb_exc_raise(e.getError());
    SWIG_fail;
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_disown_B2QueryCallback(int argc, VALUE *argv, VALUE self) {
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2QueryCallback *","disown_B2QueryCallback", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< b2QueryCallback * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2Jacobian

  Proxy of C++ Liquidfun::B2Jacobian class


*/
static swig_class SwigClassB2Jacobian;

/*
  Document-method: Liquidfun::B2Jacobian.linear

  call-seq:
    linear -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Jacobian.linear=

  call-seq:
    linear=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Jacobian_linear_set(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","linear", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","linear", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","linear", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->linear = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Jacobian_linear_get(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","linear", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  result = (b2Vec2 *) & ((arg1)->linear);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Jacobian.angularA

  call-seq:
    angularA -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Jacobian.angularA=

  call-seq:
    angularA=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Jacobian_angularA_set(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","angularA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularA", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularA = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Jacobian_angularA_get(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","angularA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  result = (float32) ((arg1)->angularA);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Jacobian.angularB

  call-seq:
    angularB -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2Jacobian.angularB=

  call-seq:
    angularB=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2Jacobian_angularB_set(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","angularB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularB", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularB = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Jacobian_angularB_get(int argc, VALUE *argv, VALUE self) {
  b2Jacobian *arg1 = (b2Jacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Jacobian *","angularB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Jacobian * >(argp1);
  result = (float32) ((arg1)->angularB);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2Jacobian_allocate(VALUE self)
#else
_wrap_B2Jacobian_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2Jacobian);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2Jacobian.new

  call-seq:
    B2Jacobian.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2Jacobian(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2Jacobian";
  b2Jacobian *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2Jacobian *)new b2Jacobian();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2Jacobian(void *self) {
    b2Jacobian *arg1 = (b2Jacobian *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2JointEdge

  Proxy of C++ Liquidfun::B2JointEdge class


*/
static swig_class SwigClassB2JointEdge;

/*
  Document-method: Liquidfun::B2JointEdge.other

  call-seq:
    other -> B2Body

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointEdge.other=

  call-seq:
    other=(x) -> B2Body

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointEdge_other_set(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","other", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","other", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  if (arg1) (arg1)->other = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointEdge_other_get(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","other", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  result = (b2Body *) ((arg1)->other);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointEdge.joint

  call-seq:
    joint -> B2Joint

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointEdge.joint=

  call-seq:
    joint=(x) -> B2Joint

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointEdge_joint_set(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2Joint *arg2 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","joint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Joint *","joint", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Joint * >(argp2);
  if (arg1) (arg1)->joint = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointEdge_joint_get(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Joint *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","joint", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  result = (b2Joint *) ((arg1)->joint);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Joint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointEdge.prev

  call-seq:
    prev -> B2JointEdge

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointEdge.prev=

  call-seq:
    prev=(x) -> B2JointEdge

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointEdge_prev_set(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *arg2 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","prev", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2JointEdge *","prev", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2JointEdge * >(argp2);
  if (arg1) (arg1)->prev = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointEdge_prev_get(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","prev", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  result = (b2JointEdge *) ((arg1)->prev);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointEdge.next

  call-seq:
    next -> B2JointEdge

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointEdge.next=

  call-seq:
    next=(x) -> B2JointEdge

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointEdge_next_set(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  b2JointEdge *arg2 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2JointEdge *","next", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2JointEdge * >(argp2);
  if (arg1) (arg1)->next = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointEdge_next_get(int argc, VALUE *argv, VALUE self) {
  b2JointEdge *arg1 = (b2JointEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointEdge *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointEdge *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  result = (b2JointEdge *) ((arg1)->next);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2JointEdge_allocate(VALUE self)
#else
_wrap_B2JointEdge_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2JointEdge);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2JointEdge.new

  call-seq:
    B2JointEdge.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2JointEdge(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2JointEdge";
  b2JointEdge *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2JointEdge *)new b2JointEdge();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2JointEdge(void *self) {
    b2JointEdge *arg1 = (b2JointEdge *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2JointDef

  Proxy of C++ Liquidfun::B2JointDef class


*/
static swig_class SwigClassB2JointDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2JointDef_allocate(VALUE self)
#else
_wrap_B2JointDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2JointDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2JointDef.new

  call-seq:
    B2JointDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2JointDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2JointDef";
  b2JointDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2JointDef *)new b2JointDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointDef.type

  call-seq:
    type -> int

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointDef.type=

  call-seq:
    type=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointDef_type_set(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2JointType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "b2JointType","type", 2, argv[0] ));
  } 
  arg2 = static_cast< b2JointType >(val2);
  if (arg1) (arg1)->type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointDef_type_get(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  result = (b2JointType) ((arg1)->type);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointDef.bodyA

  call-seq:
    bodyA -> B2Body

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointDef.bodyA=

  call-seq:
    bodyA=(x) -> B2Body

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointDef_bodyA_set(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","bodyA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","bodyA", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  if (arg1) (arg1)->bodyA = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointDef_bodyA_get(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","bodyA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  result = (b2Body *) ((arg1)->bodyA);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointDef.bodyB

  call-seq:
    bodyB -> B2Body

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointDef.bodyB=

  call-seq:
    bodyB=(x) -> B2Body

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointDef_bodyB_set(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","bodyB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","bodyB", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  if (arg1) (arg1)->bodyB = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointDef_bodyB_get(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","bodyB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  result = (b2Body *) ((arg1)->bodyB);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2JointDef.collideConnected

  call-seq:
    collideConnected -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2JointDef.collideConnected=

  call-seq:
    collideConnected=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2JointDef_collideConnected_set(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","collideConnected", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","collideConnected", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->collideConnected = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2JointDef_collideConnected_get(int argc, VALUE *argv, VALUE self) {
  b2JointDef *arg1 = (b2JointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2JointDef *","collideConnected", 1, self )); 
  }
  arg1 = reinterpret_cast< b2JointDef * >(argp1);
  result = (bool) ((arg1)->collideConnected);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2JointDef(void *self) {
    b2JointDef *arg1 = (b2JointDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2Joint

  Proxy of C++ Liquidfun::B2Joint class


*/
static swig_class SwigClassB2Joint;

/*
  Document-method: Liquidfun::B2Joint.get_type

  call-seq:
    get_type -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_type(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2JointType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (b2JointType)((b2Joint const *)arg1)->GetType();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_body_a

  call-seq:
    get_body_a -> B2Body

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_body_a(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint *","GetBodyA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (b2Body *)(arg1)->GetBodyA();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_body_b

  call-seq:
    get_body_b -> B2Body

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_body_b(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Body *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint *","GetBodyB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (b2Body *)(arg1)->GetBodyB();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_anchor_a

  call-seq:
    get_anchor_a -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_anchor_a(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = ((b2Joint const *)arg1)->GetAnchorA();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_anchor_b

  call-seq:
    get_anchor_b -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_anchor_b(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = ((b2Joint const *)arg1)->GetAnchorB();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_reaction_force

  call-seq:
    get_reaction_force(float32 inv_dt) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_reaction_force(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetReactionForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionForce", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = ((b2Joint const *)arg1)->GetReactionForce(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_reaction_torque

  call-seq:
    get_reaction_torque(float32 inv_dt) -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_reaction_torque(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetReactionTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (float32)((b2Joint const *)arg1)->GetReactionTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_next

  call-seq:
    get_next -> B2Joint
    get_next -> B2Joint

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Joint *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (b2Joint *)(arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Joint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2Joint_get_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Joint *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (b2Joint *)((b2Joint const *)arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Joint, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2Joint_get_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 2) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Joint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Joint_get_next__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Joint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_B2Joint_get_next__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "B2Joint.get_next", 
    "    b2Joint B2Joint.get_next()\n"
    "    b2Joint const * B2Joint.get_next()\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.is_active

  call-seq:
    is_active -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_is_active(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","IsActive", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (bool)((b2Joint const *)arg1)->IsActive();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.get_collide_connected

  call-seq:
    get_collide_connected -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_get_collide_connected(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint const *","GetCollideConnected", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      result = (bool)((b2Joint const *)arg1)->GetCollideConnected();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.dump

  call-seq:
    dump

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_dump(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint *","Dump", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  {
    try {
      (arg1)->Dump();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2Joint.shift_origin

  call-seq:
    shift_origin(B2Vec2 newOrigin)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2Joint_shift_origin(int argc, VALUE *argv, VALUE self) {
  b2Joint *arg1 = (b2Joint *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Joint *","ShiftOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< b2Joint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","ShiftOrigin", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","ShiftOrigin", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      (arg1)->ShiftOrigin((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2RevoluteJointDef < Liquidfun::B2JointDef

  Proxy of C++ Liquidfun::B2RevoluteJointDef class


*/
static swig_class SwigClassB2RevoluteJointDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2RevoluteJointDef_allocate(VALUE self)
#else
_wrap_B2RevoluteJointDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2RevoluteJointDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.new

  call-seq:
    B2RevoluteJointDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2RevoluteJointDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2RevoluteJointDef";
  b2RevoluteJointDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2RevoluteJointDef *)new b2RevoluteJointDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.init

  call-seq:
    init(B2Body bodyA, B2Body bodyB, B2Vec2 anchor)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_init(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  b2Vec2 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","Initialize", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","Initialize", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Body *","Initialize", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< b2Body * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Vec2 const &","Initialize", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","Initialize", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Vec2 * >(argp4);
  {
    try {
      (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.localAnchorA

  call-seq:
    localAnchorA -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.localAnchorA=

  call-seq:
    localAnchorA=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_localAnchorA_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","localAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","localAnchorA", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","localAnchorA", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->localAnchorA = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_localAnchorA_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","localAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->localAnchorA);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.localAnchorB

  call-seq:
    localAnchorB -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.localAnchorB=

  call-seq:
    localAnchorB=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_localAnchorB_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","localAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","localAnchorB", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","localAnchorB", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->localAnchorB = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_localAnchorB_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","localAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->localAnchorB);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.referenceAngle

  call-seq:
    referenceAngle -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.referenceAngle=

  call-seq:
    referenceAngle=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_referenceAngle_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","referenceAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","referenceAngle", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->referenceAngle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_referenceAngle_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","referenceAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (float32) ((arg1)->referenceAngle);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.enableLimit

  call-seq:
    enableLimit -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.enableLimit=

  call-seq:
    enableLimit=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_enableLimit_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","enableLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","enableLimit", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->enableLimit = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_enableLimit_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","enableLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (bool) ((arg1)->enableLimit);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.lowerAngle

  call-seq:
    lowerAngle -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.lowerAngle=

  call-seq:
    lowerAngle=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_lowerAngle_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","lowerAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","lowerAngle", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->lowerAngle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_lowerAngle_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","lowerAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (float32) ((arg1)->lowerAngle);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.upperAngle

  call-seq:
    upperAngle -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.upperAngle=

  call-seq:
    upperAngle=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_upperAngle_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","upperAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","upperAngle", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->upperAngle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_upperAngle_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","upperAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (float32) ((arg1)->upperAngle);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.enableMotor

  call-seq:
    enableMotor -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.enableMotor=

  call-seq:
    enableMotor=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_enableMotor_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","enableMotor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","enableMotor", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->enableMotor = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_enableMotor_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","enableMotor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (bool) ((arg1)->enableMotor);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.motorSpeed

  call-seq:
    motorSpeed -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.motorSpeed=

  call-seq:
    motorSpeed=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_motorSpeed_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","motorSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","motorSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->motorSpeed = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_motorSpeed_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","motorSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (float32) ((arg1)->motorSpeed);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJointDef.maxMotorTorque

  call-seq:
    maxMotorTorque -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2RevoluteJointDef.maxMotorTorque=

  call-seq:
    maxMotorTorque=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_maxMotorTorque_set(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","maxMotorTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","maxMotorTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->maxMotorTorque = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2RevoluteJointDef_maxMotorTorque_get(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJointDef *","maxMotorTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (float32) ((arg1)->maxMotorTorque);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2RevoluteJointDef(void *self) {
    b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2RevoluteJoint < Liquidfun::B2Joint

  Proxy of C++ Liquidfun::B2RevoluteJoint class


*/
static swig_class SwigClassB2RevoluteJoint;

/*
  Document-method: Liquidfun::B2RevoluteJoint.get_anchor_a

  call-seq:
    get_anchor_a -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_anchor_a(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = ((b2RevoluteJoint const *)arg1)->GetAnchorA();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_anchor_b

  call-seq:
    get_anchor_b -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_anchor_b(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = ((b2RevoluteJoint const *)arg1)->GetAnchorB();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_local_anchor_a

  call-seq:
    get_local_anchor_a -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_local_anchor_a(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetLocalAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorA();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_local_anchor_b

  call-seq:
    get_local_anchor_b -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_local_anchor_b(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetLocalAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2RevoluteJoint const *)arg1)->GetLocalAnchorB();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_reference_angle

  call-seq:
    get_reference_angle -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_reference_angle(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetReferenceAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetReferenceAngle();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_joint_angle

  call-seq:
    get_joint_angle -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_joint_angle(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetJointAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetJointAngle();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_joint_speed

  call-seq:
    get_joint_speed -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_joint_speed(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetJointSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetJointSpeed();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.is_limit_enabled

  call-seq:
    is_limit_enabled -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_is_limit_enabled(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","IsLimitEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (bool)((b2RevoluteJoint const *)arg1)->IsLimitEnabled();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.enable_limit

  call-seq:
    enable_limit(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_enable_limit(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","EnableLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","EnableLimit", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->EnableLimit(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_lower_limit

  call-seq:
    get_lower_limit -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_lower_limit(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetLowerLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetLowerLimit();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_upper_limit

  call-seq:
    get_upper_limit -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_upper_limit(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetUpperLimit", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetUpperLimit();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.set_limits

  call-seq:
    set_limits(float32 lower, float32 upper)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_set_limits(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","SetLimits", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetLimits", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetLimits", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetLimits(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.is_motor_enabled

  call-seq:
    is_motor_enabled -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_is_motor_enabled(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","IsMotorEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (bool)((b2RevoluteJoint const *)arg1)->IsMotorEnabled();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.enable_motor

  call-seq:
    enable_motor(bool flag)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_enable_motor(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","EnableMotor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","EnableMotor", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->EnableMotor(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.set_motor_speed

  call-seq:
    set_motor_speed(float32 speed)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_set_motor_speed(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","SetMotorSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetMotorSpeed", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetMotorSpeed(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_motor_speed

  call-seq:
    get_motor_speed -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_motor_speed(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetMotorSpeed", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorSpeed();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.set_max_motor_torque

  call-seq:
    set_max_motor_torque(float32 torque)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_set_max_motor_torque(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","SetMaxMotorTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetMaxMotorTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetMaxMotorTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_max_motor_torque

  call-seq:
    get_max_motor_torque -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_max_motor_torque(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetMaxMotorTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetMaxMotorTorque();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_reaction_force

  call-seq:
    get_reaction_force(float32 inv_dt) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_reaction_force(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetReactionForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionForce", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = ((b2RevoluteJoint const *)arg1)->GetReactionForce(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_reaction_torque

  call-seq:
    get_reaction_torque(float32 inv_dt) -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_reaction_torque(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetReactionTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetReactionTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.get_motor_torque

  call-seq:
    get_motor_torque(float32 inv_dt) -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_get_motor_torque(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint const *","GetMotorTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetMotorTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2RevoluteJoint.dump

  call-seq:
    dump

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2RevoluteJoint_dump(int argc, VALUE *argv, VALUE self) {
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2RevoluteJoint *","Dump", 1, self )); 
  }
  arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  {
    try {
      (arg1)->Dump();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2MotorJointDef < Liquidfun::B2JointDef

  Proxy of C++ Liquidfun::B2MotorJointDef class


*/
static swig_class SwigClassB2MotorJointDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2MotorJointDef_allocate(VALUE self)
#else
_wrap_B2MotorJointDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2MotorJointDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.new

  call-seq:
    B2MotorJointDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2MotorJointDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2MotorJointDef";
  b2MotorJointDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2MotorJointDef *)new b2MotorJointDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.init

  call-seq:
    init(B2Body bodyA, B2Body bodyB)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_init(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","Initialize", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Body *","Initialize", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Body * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Body *","Initialize", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< b2Body * >(argp3);
  {
    try {
      (arg1)->Initialize(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.linearOffset

  call-seq:
    linearOffset -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MotorJointDef.linearOffset=

  call-seq:
    linearOffset=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_linearOffset_set(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","linearOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","linearOffset", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","linearOffset", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->linearOffset = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MotorJointDef_linearOffset_get(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","linearOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->linearOffset);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.angularOffset

  call-seq:
    angularOffset -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MotorJointDef.angularOffset=

  call-seq:
    angularOffset=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_angularOffset_set(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","angularOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularOffset = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MotorJointDef_angularOffset_get(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","angularOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  result = (float32) ((arg1)->angularOffset);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.maxForce

  call-seq:
    maxForce -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MotorJointDef.maxForce=

  call-seq:
    maxForce=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_maxForce_set(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","maxForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","maxForce", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->maxForce = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MotorJointDef_maxForce_get(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","maxForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  result = (float32) ((arg1)->maxForce);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.maxTorque

  call-seq:
    maxTorque -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MotorJointDef.maxTorque=

  call-seq:
    maxTorque=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_maxTorque_set(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","maxTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","maxTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->maxTorque = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MotorJointDef_maxTorque_get(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","maxTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  result = (float32) ((arg1)->maxTorque);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJointDef.correctionFactor

  call-seq:
    correctionFactor -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2MotorJointDef.correctionFactor=

  call-seq:
    correctionFactor=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2MotorJointDef_correctionFactor_set(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","correctionFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","correctionFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->correctionFactor = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2MotorJointDef_correctionFactor_get(int argc, VALUE *argv, VALUE self) {
  b2MotorJointDef *arg1 = (b2MotorJointDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJointDef *","correctionFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJointDef * >(argp1);
  result = (float32) ((arg1)->correctionFactor);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2MotorJointDef(void *self) {
    b2MotorJointDef *arg1 = (b2MotorJointDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2MotorJoint < Liquidfun::B2Joint

  Proxy of C++ Liquidfun::B2MotorJoint class


*/
static swig_class SwigClassB2MotorJoint;

/*
  Document-method: Liquidfun::B2MotorJoint.get_anchor_a

  call-seq:
    get_anchor_a -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_anchor_a(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetAnchorA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = ((b2MotorJoint const *)arg1)->GetAnchorA();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_anchor_b

  call-seq:
    get_anchor_b -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_anchor_b(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetAnchorB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = ((b2MotorJoint const *)arg1)->GetAnchorB();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_reaction_force

  call-seq:
    get_reaction_force(float32 inv_dt) -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_reaction_force(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  b2Vec2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetReactionForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionForce", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = ((b2MotorJoint const *)arg1)->GetReactionForce(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_reaction_torque

  call-seq:
    get_reaction_torque(float32 inv_dt) -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_reaction_torque(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetReactionTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","GetReactionTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = (float32)((b2MotorJoint const *)arg1)->GetReactionTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.set_linear_offset

  call-seq:
    set_linear_offset(B2Vec2 linearOffset)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_set_linear_offset(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","SetLinearOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","SetLinearOffset", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","SetLinearOffset", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  {
    try {
      (arg1)->SetLinearOffset((b2Vec2 const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_linear_offset

  call-seq:
    get_linear_offset -> B2Vec2

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_linear_offset(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetLinearOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = (b2Vec2 *) &((b2MotorJoint const *)arg1)->GetLinearOffset();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.set_angular_offset

  call-seq:
    set_angular_offset(float32 angularOffset)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_set_angular_offset(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","SetAngularOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetAngularOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetAngularOffset(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_angular_offset

  call-seq:
    get_angular_offset -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_angular_offset(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetAngularOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = (float32)((b2MotorJoint const *)arg1)->GetAngularOffset();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.set_max_force

  call-seq:
    set_max_force(float32 force)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_set_max_force(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","SetMaxForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetMaxForce", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetMaxForce(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_max_force

  call-seq:
    get_max_force -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_max_force(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetMaxForce", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = (float32)((b2MotorJoint const *)arg1)->GetMaxForce();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.set_max_torque

  call-seq:
    set_max_torque(float32 torque)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_set_max_torque(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","SetMaxTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetMaxTorque", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetMaxTorque(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_max_torque

  call-seq:
    get_max_torque -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_max_torque(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetMaxTorque", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = (float32)((b2MotorJoint const *)arg1)->GetMaxTorque();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.set_correction_factor

  call-seq:
    set_correction_factor(float32 factor)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_set_correction_factor(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","SetCorrectionFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetCorrectionFactor", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetCorrectionFactor(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.get_correction_factor

  call-seq:
    get_correction_factor -> float32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_get_correction_factor(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint const *","GetCorrectionFactor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      result = (float32)((b2MotorJoint const *)arg1)->GetCorrectionFactor();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2MotorJoint.dump

  call-seq:
    dump

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2MotorJoint_dump(int argc, VALUE *argv, VALUE self) {
  b2MotorJoint *arg1 = (b2MotorJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2MotorJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2MotorJoint *","Dump", 1, self )); 
  }
  arg1 = reinterpret_cast< b2MotorJoint * >(argp1);
  {
    try {
      (arg1)->Dump();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticleColor

  Proxy of C++ Liquidfun::B2ParticleColor class


*/
static swig_class SwigClassB2ParticleColor;

/*
  Document-method: Liquidfun::B2ParticleColor.new

  call-seq:
    B2ParticleColor.new
    B2ParticleColor.new(uint8 r, uint8 g, uint8 b, uint8 a)
    B2ParticleColor.new(B2Color color)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleColor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleColor";
  b2ParticleColor *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticleColor *)new b2ParticleColor();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.new

  call-seq:
    B2ParticleColor.new()
    B2ParticleColor.new(uint8 r, uint8 g, uint8 b, uint8 a)
    B2ParticleColor.new(B2Color color)

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleColor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  uint8 arg1 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleColor";
  b2ParticleColor *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_char(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "uint8","b2ParticleColor", 1, argv[0] ));
  } 
  arg1 = static_cast< uint8 >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","b2ParticleColor", 2, argv[1] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8","b2ParticleColor", 3, argv[2] ));
  } 
  arg3 = static_cast< uint8 >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint8","b2ParticleColor", 4, argv[3] ));
  } 
  arg4 = static_cast< uint8 >(val4);
  {
    try {
      result = (b2ParticleColor *)new b2ParticleColor(arg1,arg2,arg3,arg4);
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticleColor_allocate(VALUE self)
#else
_wrap_B2ParticleColor_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticleColor);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_B2ParticleColor__SWIG_2(int argc, VALUE *argv, VALUE self) {
  b2Color *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleColor";
  b2ParticleColor *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2Color const &","b2ParticleColor", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","b2ParticleColor", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< b2Color * >(argp1);
  {
    try {
      result = (b2ParticleColor *)new b2ParticleColor((b2Color const &)*arg1);
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_B2ParticleColor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_B2ParticleColor__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2Color, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_B2ParticleColor__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_char(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_B2ParticleColor__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "b2ParticleColor.new", 
    "    b2ParticleColor.new()\n"
    "    b2ParticleColor.new(uint8 r, uint8 g, uint8 b, uint8 a)\n"
    "    b2ParticleColor.new(b2Color const &color)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.is_zero

  call-seq:
    is_zero -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_is_zero(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","IsZero", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  {
    try {
      result = (bool)((b2ParticleColor const *)arg1)->IsZero();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.set

  call-seq:
    set(uint8 r_, uint8 g_, uint8 b_, uint8 a_)
    set(B2Color color)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "uint8","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< uint8 >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "uint8","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< uint8 >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "uint8","Set", 5, argv[3] ));
  } 
  arg5 = static_cast< uint8 >(val5);
  {
    try {
      (arg1)->Set(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2Color *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Color,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Color const &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Color const &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Color * >(argp2);
  {
    try {
      (arg1)->Set((b2Color const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2ParticleColor_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2ParticleColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2Color, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_B2ParticleColor_set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2ParticleColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_B2ParticleColor_set__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "B2ParticleColor.set", 
    "    void B2ParticleColor.set(uint8 r_, uint8 g_, uint8 b_, uint8 a_)\n"
    "    void B2ParticleColor.set(b2Color const &color)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.*

  call-seq:
    *(float32 s) -> B2ParticleColor
    *(uint8 s) -> B2ParticleColor

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  b2ParticleColor result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      result = ((b2ParticleColor const *)arg1)->operator *(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2ParticleColor(static_cast< const b2ParticleColor& >(result))), SWIGTYPE_p_b2ParticleColor, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  b2ParticleColor result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  {
    try {
      result = ((b2ParticleColor const *)arg1)->operator *(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2ParticleColor(static_cast< const b2ParticleColor& >(result))), SWIGTYPE_p_b2ParticleColor, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_B2ParticleColor___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2ParticleColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_B2ParticleColor___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_b2ParticleColor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_B2ParticleColor___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "B2ParticleColor.__mul__", 
    "    b2ParticleColor B2ParticleColor.__mul__(float32 s)\n"
    "    b2ParticleColor B2ParticleColor.__mul__(uint8 s)\n");
  
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.+

  call-seq:
    +(color) -> B2ParticleColor

Add operator.
*/
SWIGINTERN VALUE
_wrap_B2ParticleColor___add__(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2ParticleColor result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleColor const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  {
    try {
      result = ((b2ParticleColor const *)arg1)->operator +((b2ParticleColor const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2ParticleColor(static_cast< const b2ParticleColor& >(result))), SWIGTYPE_p_b2ParticleColor, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.-

  call-seq:
    -(color) -> B2ParticleColor

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_B2ParticleColor___sub__(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2ParticleColor result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleColor const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  {
    try {
      result = ((b2ParticleColor const *)arg1)->operator -((b2ParticleColor const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj((new b2ParticleColor(static_cast< const b2ParticleColor& >(result))), SWIGTYPE_p_b2ParticleColor, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.==

  call-seq:
    ==(color) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_B2ParticleColor___eq__(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleColor const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  {
    try {
      result = (bool)((b2ParticleColor const *)arg1)->operator ==((b2ParticleColor const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.mix

  call-seq:
    mix(B2ParticleColor mixColor, int32 const strength)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_mix(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","Mix", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor *const","Mix", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","Mix", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  {
    try {
      (arg1)->Mix(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.mix_colors

  call-seq:
    mix_colors(B2ParticleColor colorA, B2ParticleColor colorB, int32 const strength)

A class method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_mix_colors(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  b2ParticleColor *arg2 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  int32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *const","b2ParticleColor::MixColors", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor *const","b2ParticleColor::MixColors", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","b2ParticleColor::MixColors", 3, argv[2] ));
  } 
  arg3 = static_cast< int32 >(val3);
  {
    try {
      b2ParticleColor::MixColors(arg1,arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.r

  call-seq:
    r -> uint8

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleColor.r=

  call-seq:
    r=(x) -> uint8

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_r_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","r", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  if (arg1) (arg1)->r = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor_r_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","r", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  result = (uint8) ((arg1)->r);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.g

  call-seq:
    g -> uint8

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleColor.g=

  call-seq:
    g=(x) -> uint8

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_g_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","g", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  if (arg1) (arg1)->g = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor_g_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","g", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  result = (uint8) ((arg1)->g);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.b

  call-seq:
    b -> uint8

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleColor.b=

  call-seq:
    b=(x) -> uint8

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_b_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","b", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  if (arg1) (arg1)->b = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor_b_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","b", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  result = (uint8) ((arg1)->b);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleColor.a

  call-seq:
    a -> uint8

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleColor.a=

  call-seq:
    a=(x) -> uint8

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleColor_a_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint8","a", 2, argv[0] ));
  } 
  arg2 = static_cast< uint8 >(val2);
  if (arg1) (arg1)->a = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleColor_a_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleColor *","a", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleColor * >(argp1);
  result = (uint8) ((arg1)->a);
  vresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticleColor(void *self) {
    b2ParticleColor *arg1 = (b2ParticleColor *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun.b2ParticleColor_zero

  call-seq:
    b2ParticleColor_zero -> B2ParticleColor

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_b2ParticleColor_zero_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_NewPointerObj(SWIG_as_voidptr(&b2ParticleColor_zero), SWIGTYPE_p_b2ParticleColor,  0 );
  return _val;
}


/*
  Document-method: Liquidfun.b2ParticleColor_zero=

  call-seq:
    b2ParticleColor_zero=(x) -> B2ParticleColor

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_b2ParticleColor_zero_set(VALUE self, VALUE _val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_b2ParticleColor,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2ParticleColor_zero""' of type '""b2ParticleColor""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2ParticleColor_zero""' of type '""b2ParticleColor""'");
    } else {
      b2ParticleColor_zero = *(reinterpret_cast< b2ParticleColor * >(argp));
    }
  }
  return _val;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticleDef

  Proxy of C++ Liquidfun::B2ParticleDef class


*/
static swig_class SwigClassB2ParticleDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticleDef_allocate(VALUE self)
#else
_wrap_B2ParticleDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticleDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2ParticleDef.new

  call-seq:
    B2ParticleDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleDef";
  b2ParticleDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticleDef *)new b2ParticleDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.set_position

  call-seq:
    set_position(float32 x, float32 y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_set_position(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","SetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetPosition", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetPosition(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.set_color

  call-seq:
    set_color(int32 r, int32 g, int32 b, int32 a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_set_color(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","SetColor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","SetColor", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","SetColor", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int32","SetColor", 4, argv[2] ));
  } 
  arg4 = static_cast< int32 >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int32","SetColor", 5, argv[3] ));
  } 
  arg5 = static_cast< int32 >(val5);
  {
    try {
      (arg1)->SetColor(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.flags

  call-seq:
    flags -> uint32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.flags=

  call-seq:
    flags=(x) -> uint32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_flags_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","flags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->flags = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_flags_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (uint32) ((arg1)->flags);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.position

  call-seq:
    position -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.position=

  call-seq:
    position=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_position_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","position", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","position", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_position_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->position);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.velocity

  call-seq:
    velocity -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.velocity=

  call-seq:
    velocity=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_velocity_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","velocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","velocity", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","velocity", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->velocity = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_velocity_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","velocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->velocity);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.color

  call-seq:
    color -> B2ParticleColor

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.color=

  call-seq:
    color=(x) -> B2ParticleColor

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_color_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","color", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor const &","color", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleColor const &","color", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_color_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleColor *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","color", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (b2ParticleColor *) & ((arg1)->color);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.lifetime

  call-seq:
    lifetime -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.lifetime=

  call-seq:
    lifetime=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_lifetime_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","lifetime", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","lifetime", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->lifetime = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_lifetime_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","lifetime", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (float32) ((arg1)->lifetime);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleDef.group

  call-seq:
    group -> B2ParticleGroup

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleDef.group=

  call-seq:
    group=(x) -> B2ParticleGroup

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleDef_group_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleGroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleGroup *","group", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleGroup * >(argp2);
  if (arg1) (arg1)->group = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleDef_group_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleGroup *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleDef *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleDef * >(argp1);
  result = (b2ParticleGroup *) ((arg1)->group);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticleDef(void *self) {
    b2ParticleDef *arg1 = (b2ParticleDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun.b_2calculate_particle_iterations

  call-seq:
    b_2calculate_particle_iterations(float32 gravity, float32 radius, float32 timeStep) -> int32

A module function.

*/
SWIGINTERN VALUE
_wrap_b_2calculate_particle_iterations(int argc, VALUE *argv, VALUE self) {
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float32","b2CalculateParticleIterations", 1, argv[0] ));
  } 
  arg1 = static_cast< float32 >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","b2CalculateParticleIterations", 2, argv[1] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","b2CalculateParticleIterations", 3, argv[2] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      result = (int32)b2CalculateParticleIterations(arg1,arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticleGroup

  Proxy of C++ Liquidfun::B2ParticleGroup class


*/
static swig_class SwigClassB2ParticleGroup;

/*
  Document-method: Liquidfun::B2ParticleGroup.get_next

  call-seq:
    get_next -> B2ParticleGroup

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroup_get_next(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleGroup *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroup const *","GetNext", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroup * >(argp1);
  {
    try {
      result = (b2ParticleGroup *)((b2ParticleGroup const *)arg1)->GetNext();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroup.get_particle_count

  call-seq:
    get_particle_count -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroup_get_particle_count(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroup const *","GetParticleCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroup * >(argp1);
  {
    try {
      result = (int32)((b2ParticleGroup const *)arg1)->GetParticleCount();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroup.get_buffer_index

  call-seq:
    get_buffer_index -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroup_get_buffer_index(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroup const *","GetBufferIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroup * >(argp1);
  {
    try {
      result = (int32)((b2ParticleGroup const *)arg1)->GetBufferIndex();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroup.get_group_flags

  call-seq:
    get_group_flags -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroup_get_group_flags(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroup const *","GetGroupFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroup * >(argp1);
  {
    try {
      result = (int32)((b2ParticleGroup const *)arg1)->GetGroupFlags();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticleGroupDef

  Proxy of C++ Liquidfun::B2ParticleGroupDef class


*/
static swig_class SwigClassB2ParticleGroupDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticleGroupDef_allocate(VALUE self)
#else
_wrap_B2ParticleGroupDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticleGroupDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.new

  call-seq:
    B2ParticleGroupDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleGroupDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleGroupDef";
  b2ParticleGroupDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticleGroupDef *)new b2ParticleGroupDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticleGroupDef(void *self) {
    b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-method: Liquidfun::B2ParticleGroupDef.flags

  call-seq:
    flags -> uint32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.flags=

  call-seq:
    flags=(x) -> uint32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_flags_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","flags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->flags = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_flags_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (uint32) ((arg1)->flags);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.groupFlags

  call-seq:
    groupFlags -> uint32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.groupFlags=

  call-seq:
    groupFlags=(x) -> uint32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_groupFlags_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","groupFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","groupFlags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->groupFlags = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_groupFlags_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","groupFlags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (uint32) ((arg1)->groupFlags);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.position

  call-seq:
    position -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.position=

  call-seq:
    position=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_position_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","position", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","position", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->position = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_position_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","position", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->position);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.angle

  call-seq:
    angle -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.angle=

  call-seq:
    angle=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_angle_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angle", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angle = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_angle_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","angle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (float32) ((arg1)->angle);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.linearVelocity

  call-seq:
    linearVelocity -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.linearVelocity=

  call-seq:
    linearVelocity=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_linearVelocity_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","linearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","linearVelocity", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","linearVelocity", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->linearVelocity = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_linearVelocity_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","linearVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2Vec2 *) & ((arg1)->linearVelocity);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.angularVelocity

  call-seq:
    angularVelocity -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.angularVelocity=

  call-seq:
    angularVelocity=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_angularVelocity_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","angularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","angularVelocity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->angularVelocity = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_angularVelocity_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","angularVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (float32) ((arg1)->angularVelocity);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.color

  call-seq:
    color -> B2ParticleColor

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.color=

  call-seq:
    color=(x) -> B2ParticleColor

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_color_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","color", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleColor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleColor const &","color", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleColor const &","color", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleColor * >(argp2);
  if (arg1) (arg1)->color = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_color_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleColor *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","color", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2ParticleColor *) & ((arg1)->color);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleColor, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.strength

  call-seq:
    strength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.strength=

  call-seq:
    strength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_strength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","strength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->strength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_strength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (float32) ((arg1)->strength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.shape

  call-seq:
    shape -> B2Shape

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.shape=

  call-seq:
    shape=(x) -> B2Shape

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_shape_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Shape const *","shape", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Shape * >(argp2);
  if (arg1) (arg1)->shape = (b2Shape const *)arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_shape_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Shape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","shape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2Shape *) ((arg1)->shape);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Shape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.shapeCount

  call-seq:
    shapeCount -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.shapeCount=

  call-seq:
    shapeCount=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_shapeCount_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","shapeCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","shapeCount", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->shapeCount = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_shapeCount_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","shapeCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (int32) ((arg1)->shapeCount);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.stride

  call-seq:
    stride -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.stride=

  call-seq:
    stride=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_stride_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","stride", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","stride", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->stride = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_stride_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","stride", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (float32) ((arg1)->stride);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.particleCount

  call-seq:
    particleCount -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.particleCount=

  call-seq:
    particleCount=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_particleCount_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","particleCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","particleCount", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->particleCount = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_particleCount_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","particleCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (int32) ((arg1)->particleCount);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.positionData

  call-seq:
    positionData -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.positionData=

  call-seq:
    positionData=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_positionData_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","positionData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2Vec2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const *","positionData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->positionData = (b2Vec2 const *)arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_positionData_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","positionData", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2Vec2 *) ((arg1)->positionData);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.lifetime

  call-seq:
    lifetime -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.lifetime=

  call-seq:
    lifetime=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_lifetime_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","lifetime", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","lifetime", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->lifetime = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_lifetime_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","lifetime", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (float32) ((arg1)->lifetime);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.group

  call-seq:
    group -> B2ParticleGroup

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.group=

  call-seq:
    group=(x) -> B2ParticleGroup

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_group_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleGroup, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleGroup *","group", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleGroup * >(argp2);
  if (arg1) (arg1)->group = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_group_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleGroup *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","group", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2ParticleGroup *) ((arg1)->group);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.circleShapes

  call-seq:
    circleShapes -> B2CircleShape

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.circleShapes=

  call-seq:
    circleShapes=(x) -> B2CircleShape

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_circleShapes_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2CircleShape *arg2 = (b2CircleShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","circleShapes", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2CircleShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2CircleShape const *","circleShapes", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2CircleShape * >(argp2);
  if (arg1) (arg1)->circleShapes = (b2CircleShape const *)arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_circleShapes_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2CircleShape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","circleShapes", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (b2CircleShape *) ((arg1)->circleShapes);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2CircleShape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.ownShapesArray

  call-seq:
    ownShapesArray -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleGroupDef.ownShapesArray=

  call-seq:
    ownShapesArray=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_ownShapesArray_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","ownShapesArray", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ownShapesArray", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->ownShapesArray = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_ownShapesArray_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","ownShapesArray", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  result = (bool) ((arg1)->ownShapesArray);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.free_shapes_memory

  call-seq:
    free_shapes_memory

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_free_shapes_memory(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","FreeShapesMemory", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  {
    try {
      (arg1)->FreeShapesMemory();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.set_circle_shapes_from_vertex_list

  call-seq:
    set_circle_shapes_from_vertex_list(void * inBuf, float radius)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_set_circle_shapes_from_vertex_list(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","SetCircleShapesFromVertexList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  {
    /* Get the length of the array */
    int size = RARRAY_LEN(argv[0]); 
    int i;
    float* tmp = (float *) malloc(size*sizeof(float));
    /* Get the first element in memory */
    VALUE *ptr = RARRAY_PTR(argv[0]); 
    for (i=0; i < size; i++, ptr++) {
      /* Convert Ruby float to C++ float */
      float val;
      int encodeResult = SWIG_AsVal_float(*ptr, &val);
      if (!SWIG_IsOK(encodeResult)) {
        SWIG_exception_fail(SWIG_ArgError(encodeResult), Ruby_Format_TypeError( "", "float32","SetCircleShapesFromVertexList", 2, argv[0] ));
      } 
      tmp[i]= val;
    }
    arg2 = static_cast< void * >(tmp);
    arg3 = size;
    //     /* Get the length of the array */
    //   int size = RARRAY_LEN(argv[0]); 
    //   int i;
    //   arg2 = (float **) malloc((size+1)*sizeof(float *));
    //   /* Get the first element in memory */
    //   VALUE *ptr = RARRAY_PTR(argv[0]); 
    //   for (i=0; i < size; i++, ptr++) {
    //     /* Convert Ruby Object String to char* */
    //     float val;
    //     int encodeResult = SWIG_AsVal_float(*ptr, &val);
    //     if (!SWIG_IsOK(encodeResult)) {
    //         SWIG_exception_fail(SWIG_ArgError(encodeResult), Ruby_Format_TypeError( "", "float32","b2Color", 3, argv[2] ));
    //     } 
    //     arg2[i]= static_cast< float32 >(val);
    //     // arg2[i]= StringValuePtr(*ptr); 
    //   }
    //   arg2[i]=NULL; /* End of list */
  }
  ecode4 = SWIG_AsVal_float(argv[1], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","SetCircleShapesFromVertexList", 4, argv[1] ));
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->SetCircleShapesFromVertexList(arg2,arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.set_position

  call-seq:
    set_position(float32 x, float32 y)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_set_position(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","SetPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetPosition", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  {
    try {
      (arg1)->SetPosition(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleGroupDef.set_color

  call-seq:
    set_color(int32 r, int32 g, int32 b, int32 a)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleGroupDef_set_color(int argc, VALUE *argv, VALUE self) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleGroupDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleGroupDef *","SetColor", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleGroupDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","SetColor", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int32","SetColor", 3, argv[1] ));
  } 
  arg3 = static_cast< int32 >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int32","SetColor", 4, argv[2] ));
  } 
  arg4 = static_cast< int32 >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "int32","SetColor", 5, argv[3] ));
  } 
  arg5 = static_cast< int32 >(val5);
  {
    try {
      (arg1)->SetColor(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticleSystem

  Proxy of C++ Liquidfun::B2ParticleSystem class


*/
static swig_class SwigClassB2ParticleSystem;

/*
  Document-method: Liquidfun::B2ParticleSystem.create_particle

  call-seq:
    create_particle(B2ParticleDef C_def) -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_create_particle(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","CreateParticle", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleDef const &","CreateParticle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleDef const &","CreateParticle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleDef * >(argp2);
  {
    try {
      result = (int32)(arg1)->CreateParticle((b2ParticleDef const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.join_particle_groups

  call-seq:
    join_particle_groups(B2ParticleGroup groupA, B2ParticleGroup groupB)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_join_particle_groups(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  b2ParticleGroup *arg3 = (b2ParticleGroup *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","JoinParticleGroups", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleGroup *","JoinParticleGroups", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2ParticleGroup * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2ParticleGroup *","JoinParticleGroups", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< b2ParticleGroup * >(argp3);
  {
    try {
      (arg1)->JoinParticleGroups(arg2,arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.get_particle_group_list

  call-seq:
    get_particle_group_list -> B2ParticleGroup

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_get_particle_group_list(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2ParticleGroup *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","GetParticleGroupList", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  {
    try {
      result = (b2ParticleGroup *)((b2ParticleSystem const *)arg1)->GetParticleGroupList();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.destroy_particles_in_shape

  call-seq:
    destroy_particles_in_shape(B2Shape shape, B2Transform xf)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_destroy_particles_in_shape(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2Shape *arg2 = 0 ;
  b2Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","DestroyParticlesInShape", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Shape,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Shape const &","DestroyParticlesInShape", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Shape const &","DestroyParticlesInShape", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Shape * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Transform const &","DestroyParticlesInShape", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Transform const &","DestroyParticlesInShape", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Transform * >(argp3);
  {
    try {
      (arg1)->DestroyParticlesInShape((b2Shape const &)*arg2,(b2Transform const &)*arg3);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.create_particle_group

  call-seq:
    create_particle_group(B2ParticleGroupDef C_def) -> B2ParticleGroup

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_create_particle_group(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleGroupDef *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  b2ParticleGroup *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","CreateParticleGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2ParticleGroupDef,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2ParticleGroupDef const &","CreateParticleGroup", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2ParticleGroupDef const &","CreateParticleGroup", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2ParticleGroupDef * >(argp2);
  {
    try {
      result = (b2ParticleGroup *)(arg1)->CreateParticleGroup((b2ParticleGroupDef const &)*arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ParticleGroup, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.get_particle_group_count

  call-seq:
    get_particle_group_count -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_get_particle_group_count(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","GetParticleGroupCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  {
    try {
      result = (int32)((b2ParticleSystem const *)arg1)->GetParticleGroupCount();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.get_particle_count

  call-seq:
    get_particle_count -> int32

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_get_particle_count(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","GetParticleCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  {
    try {
      result = (int32)((b2ParticleSystem const *)arg1)->GetParticleCount();
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.set_max_particle_count

  call-seq:
    set_max_particle_count(int32 count)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_set_max_particle_count(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","SetMaxParticleCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","SetMaxParticleCount", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  {
    try {
      (arg1)->SetMaxParticleCount(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.set_damping

  call-seq:
    set_damping(float32 damping)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_set_damping(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","SetDamping", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetDamping", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetDamping(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.set_radius

  call-seq:
    set_radius(float32 radius)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_set_radius(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","SetRadius", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","SetRadius", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  {
    try {
      (arg1)->SetRadius(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.query_shape_aabb

  call-seq:
    query_shape_aabb(B2QueryCallback callback, B2Shape shape, B2Transform xf)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_query_shape_aabb(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2QueryCallback *arg2 = (b2QueryCallback *) 0 ;
  b2Shape *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","QueryShapeAABB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_b2QueryCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2QueryCallback *","QueryShapeAABB", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< b2QueryCallback * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_b2Shape,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "b2Shape const &","QueryShapeAABB", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Shape const &","QueryShapeAABB", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< b2Shape * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_b2Transform,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "b2Transform const &","QueryShapeAABB", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Transform const &","QueryShapeAABB", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< b2Transform * >(argp4);
  {
    try {
      ((b2ParticleSystem const *)arg1)->QueryShapeAABB(arg2,(b2Shape const &)*arg3,(b2Transform const &)*arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.set_particle_velocity

  call-seq:
    set_particle_velocity(int32 index, float32 vx, float32 vy)

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_set_particle_velocity(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem *","SetParticleVelocity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","SetParticleVelocity", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float32","SetParticleVelocity", 3, argv[1] ));
  } 
  arg3 = static_cast< float32 >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float32","SetParticleVelocity", 4, argv[2] ));
  } 
  arg4 = static_cast< float32 >(val4);
  {
    try {
      (arg1)->SetParticleVelocity(arg2,arg3,arg4);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return Qnil;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.get_particle_position_x

  call-seq:
    get_particle_position_x(int32 index) -> float

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_get_particle_position_x(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","GetParticlePositionX", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","GetParticlePositionX", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  {
    try {
      result = (float)((b2ParticleSystem const *)arg1)->GetParticlePositionX(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystem.get_particle_position_y

  call-seq:
    get_particle_position_y(int32 index) -> float

An instance method.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystem_get_particle_position_y(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystem const *","GetParticlePositionY", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","GetParticlePositionY", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  {
    try {
      result = (float)((b2ParticleSystem const *)arg1)->GetParticlePositionY(arg2);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-class: Liquidfun::B2ParticlePair

  Proxy of C++ Liquidfun::B2ParticlePair class


*/
static swig_class SwigClassB2ParticlePair;

/*
  Document-method: Liquidfun::B2ParticlePair.indexA

  call-seq:
    indexA -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticlePair.indexA=

  call-seq:
    indexA=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticlePair_indexA_set(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","indexA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","indexA", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->indexA = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticlePair_indexA_get(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","indexA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  result = (int32) ((arg1)->indexA);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticlePair.indexB

  call-seq:
    indexB -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticlePair.indexB=

  call-seq:
    indexB=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticlePair_indexB_set(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","indexB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","indexB", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->indexB = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticlePair_indexB_get(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","indexB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  result = (int32) ((arg1)->indexB);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticlePair.flags

  call-seq:
    flags -> uint32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticlePair.flags=

  call-seq:
    flags=(x) -> uint32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticlePair_flags_set(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","flags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->flags = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticlePair_flags_get(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  result = (uint32) ((arg1)->flags);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticlePair.strength

  call-seq:
    strength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticlePair.strength=

  call-seq:
    strength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticlePair_strength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","strength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->strength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticlePair_strength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  result = (float32) ((arg1)->strength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticlePair.distance

  call-seq:
    distance -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticlePair.distance=

  call-seq:
    distance=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticlePair_distance_set(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","distance", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","distance", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->distance = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticlePair_distance_get(int argc, VALUE *argv, VALUE self) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticlePair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticlePair *","distance", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticlePair * >(argp1);
  result = (float32) ((arg1)->distance);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticlePair_allocate(VALUE self)
#else
_wrap_B2ParticlePair_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticlePair);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2ParticlePair.new

  call-seq:
    B2ParticlePair.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticlePair(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticlePair";
  b2ParticlePair *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticlePair *)new b2ParticlePair();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticlePair(void *self) {
    b2ParticlePair *arg1 = (b2ParticlePair *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2ParticleTriad

  Proxy of C++ Liquidfun::B2ParticleTriad class


*/
static swig_class SwigClassB2ParticleTriad;

/*
  Document-method: Liquidfun::B2ParticleTriad.indexA

  call-seq:
    indexA -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.indexA=

  call-seq:
    indexA=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexA_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","indexA", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->indexA = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexA_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexA", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (int32) ((arg1)->indexA);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.indexB

  call-seq:
    indexB -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.indexB=

  call-seq:
    indexB=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexB_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","indexB", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->indexB = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexB_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexB", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (int32) ((arg1)->indexB);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.indexC

  call-seq:
    indexC -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.indexC=

  call-seq:
    indexC=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexC_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexC", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","indexC", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->indexC = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_indexC_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","indexC", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (int32) ((arg1)->indexC);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.flags

  call-seq:
    flags -> uint32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.flags=

  call-seq:
    flags=(x) -> uint32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_flags_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  uint32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint32","flags", 2, argv[0] ));
  } 
  arg2 = static_cast< uint32 >(val2);
  if (arg1) (arg1)->flags = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_flags_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (uint32) ((arg1)->flags);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.strength

  call-seq:
    strength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.strength=

  call-seq:
    strength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_strength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","strength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->strength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_strength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","strength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (float32) ((arg1)->strength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.pa

  call-seq:
    pa -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.pa=

  call-seq:
    pa=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_pa_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pa", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","pa", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","pa", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->pa = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_pa_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pa", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (b2Vec2 *) & ((arg1)->pa);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.pb

  call-seq:
    pb -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.pb=

  call-seq:
    pb=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_pb_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pb", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","pb", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","pb", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->pb = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_pb_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pb", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (b2Vec2 *) & ((arg1)->pb);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.pc

  call-seq:
    pc -> B2Vec2

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.pc=

  call-seq:
    pc=(x) -> B2Vec2

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_pc_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pc", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_b2Vec2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "b2Vec2 const &","pc", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "b2Vec2 const &","pc", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< b2Vec2 * >(argp2);
  if (arg1) (arg1)->pc = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_pc_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  b2Vec2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","pc", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (b2Vec2 *) & ((arg1)->pc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.ka

  call-seq:
    ka -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.ka=

  call-seq:
    ka=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_ka_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","ka", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","ka", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->ka = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_ka_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","ka", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (float32) ((arg1)->ka);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.kb

  call-seq:
    kb -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.kb=

  call-seq:
    kb=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_kb_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","kb", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","kb", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->kb = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_kb_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","kb", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (float32) ((arg1)->kb);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.kc

  call-seq:
    kc -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.kc=

  call-seq:
    kc=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_kc_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","kc", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","kc", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->kc = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_kc_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","kc", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (float32) ((arg1)->kc);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.s

  call-seq:
    s -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleTriad.s=

  call-seq:
    s=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleTriad_s_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","s", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","s", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->s = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleTriad_s_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleTriad, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleTriad *","s", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleTriad * >(argp1);
  result = (float32) ((arg1)->s);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticleTriad_allocate(VALUE self)
#else
_wrap_B2ParticleTriad_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticleTriad);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2ParticleTriad.new

  call-seq:
    B2ParticleTriad.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleTriad(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleTriad";
  b2ParticleTriad *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticleTriad *)new b2ParticleTriad();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticleTriad(void *self) {
    b2ParticleTriad *arg1 = (b2ParticleTriad *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}

/*
  Document-class: Liquidfun::B2ParticleSystemDef

  Proxy of C++ Liquidfun::B2ParticleSystemDef class


*/
static swig_class SwigClassB2ParticleSystemDef;

SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_B2ParticleSystemDef_allocate(VALUE self)
#else
_wrap_B2ParticleSystemDef_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_b2ParticleSystemDef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.new

  call-seq:
    B2ParticleSystemDef.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_B2ParticleSystemDef(int argc, VALUE *argv, VALUE self) {
  const char *classname SWIGUNUSED = "Liquidfun::B2ParticleSystemDef";
  b2ParticleSystemDef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (b2ParticleSystemDef *)new b2ParticleSystemDef();
      DATA_PTR(self) = result;
      SWIG_RubyAddTracking(result, self);
    }
    catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return self;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.strictContactCheck

  call-seq:
    strictContactCheck -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.strictContactCheck=

  call-seq:
    strictContactCheck=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_strictContactCheck_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","strictContactCheck", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","strictContactCheck", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->strictContactCheck = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_strictContactCheck_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","strictContactCheck", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (bool) ((arg1)->strictContactCheck);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.density

  call-seq:
    density -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.density=

  call-seq:
    density=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_density_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","density", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","density", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->density = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_density_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","density", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->density);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.gravityScale

  call-seq:
    gravityScale -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.gravityScale=

  call-seq:
    gravityScale=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_gravityScale_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","gravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","gravityScale", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->gravityScale = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_gravityScale_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","gravityScale", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->gravityScale);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.radius

  call-seq:
    radius -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.radius=

  call-seq:
    radius=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_radius_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","radius", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","radius", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->radius = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_radius_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","radius", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->radius);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.maxCount

  call-seq:
    maxCount -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.maxCount=

  call-seq:
    maxCount=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_maxCount_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","maxCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","maxCount", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->maxCount = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_maxCount_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","maxCount", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (int32) ((arg1)->maxCount);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.pressureStrength

  call-seq:
    pressureStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.pressureStrength=

  call-seq:
    pressureStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_pressureStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","pressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","pressureStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->pressureStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_pressureStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","pressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->pressureStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.dampingStrength

  call-seq:
    dampingStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.dampingStrength=

  call-seq:
    dampingStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_dampingStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","dampingStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","dampingStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->dampingStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_dampingStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","dampingStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->dampingStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.elasticStrength

  call-seq:
    elasticStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.elasticStrength=

  call-seq:
    elasticStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_elasticStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","elasticStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","elasticStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->elasticStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_elasticStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","elasticStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->elasticStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.springStrength

  call-seq:
    springStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.springStrength=

  call-seq:
    springStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_springStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","springStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","springStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->springStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_springStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","springStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->springStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.viscousStrength

  call-seq:
    viscousStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.viscousStrength=

  call-seq:
    viscousStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_viscousStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","viscousStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","viscousStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->viscousStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_viscousStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","viscousStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->viscousStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.surfaceTensionPressureStrength

  call-seq:
    surfaceTensionPressureStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.surfaceTensionPressureStrength=

  call-seq:
    surfaceTensionPressureStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_surfaceTensionPressureStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","surfaceTensionPressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","surfaceTensionPressureStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->surfaceTensionPressureStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_surfaceTensionPressureStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","surfaceTensionPressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->surfaceTensionPressureStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.surfaceTensionNormalStrength

  call-seq:
    surfaceTensionNormalStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.surfaceTensionNormalStrength=

  call-seq:
    surfaceTensionNormalStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_surfaceTensionNormalStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","surfaceTensionNormalStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","surfaceTensionNormalStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->surfaceTensionNormalStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_surfaceTensionNormalStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","surfaceTensionNormalStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->surfaceTensionNormalStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.repulsiveStrength

  call-seq:
    repulsiveStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.repulsiveStrength=

  call-seq:
    repulsiveStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_repulsiveStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","repulsiveStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","repulsiveStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->repulsiveStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_repulsiveStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","repulsiveStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->repulsiveStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.powderStrength

  call-seq:
    powderStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.powderStrength=

  call-seq:
    powderStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_powderStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","powderStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","powderStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->powderStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_powderStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","powderStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->powderStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.ejectionStrength

  call-seq:
    ejectionStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.ejectionStrength=

  call-seq:
    ejectionStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_ejectionStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","ejectionStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","ejectionStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->ejectionStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_ejectionStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","ejectionStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->ejectionStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureStrength

  call-seq:
    staticPressureStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureStrength=

  call-seq:
    staticPressureStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","staticPressureStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->staticPressureStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->staticPressureStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureRelaxation

  call-seq:
    staticPressureRelaxation -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureRelaxation=

  call-seq:
    staticPressureRelaxation=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureRelaxation_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureRelaxation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","staticPressureRelaxation", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->staticPressureRelaxation = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureRelaxation_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureRelaxation", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->staticPressureRelaxation);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureIterations

  call-seq:
    staticPressureIterations -> int32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.staticPressureIterations=

  call-seq:
    staticPressureIterations=(x) -> int32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureIterations_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureIterations", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int32","staticPressureIterations", 2, argv[0] ));
  } 
  arg2 = static_cast< int32 >(val2);
  if (arg1) (arg1)->staticPressureIterations = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_staticPressureIterations_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","staticPressureIterations", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (int32) ((arg1)->staticPressureIterations);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.colorMixingStrength

  call-seq:
    colorMixingStrength -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.colorMixingStrength=

  call-seq:
    colorMixingStrength=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_colorMixingStrength_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","colorMixingStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","colorMixingStrength", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->colorMixingStrength = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_colorMixingStrength_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","colorMixingStrength", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->colorMixingStrength);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.destroyByAge

  call-seq:
    destroyByAge -> bool

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.destroyByAge=

  call-seq:
    destroyByAge=(x) -> bool

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_destroyByAge_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","destroyByAge", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","destroyByAge", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->destroyByAge = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_destroyByAge_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","destroyByAge", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (bool) ((arg1)->destroyByAge);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Liquidfun::B2ParticleSystemDef.lifetimeGranularity

  call-seq:
    lifetimeGranularity -> float32

Get value of attribute.

*/
/*
  Document-method: Liquidfun::B2ParticleSystemDef.lifetimeGranularity=

  call-seq:
    lifetimeGranularity=(x) -> float32

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_lifetimeGranularity_set(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","lifetimeGranularity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float32","lifetimeGranularity", 2, argv[0] ));
  } 
  arg2 = static_cast< float32 >(val2);
  if (arg1) (arg1)->lifetimeGranularity = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_B2ParticleSystemDef_lifetimeGranularity_get(int argc, VALUE *argv, VALUE self) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float32 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_b2ParticleSystemDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "b2ParticleSystemDef *","lifetimeGranularity", 1, self )); 
  }
  arg1 = reinterpret_cast< b2ParticleSystemDef * >(argp1);
  result = (float32) ((arg1)->lifetimeGranularity);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_b2ParticleSystemDef(void *self) {
    b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *)self;
    SWIG_RubyRemoveTracking(arg1);
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_b2RevoluteJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2RevoluteJointDef *) x));
}
static void *_p_b2MotorJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2MotorJointDef *) x));
}
static void *_p_b2RevoluteJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2RevoluteJoint *) x));
}
static void *_p_b2MotorJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2MotorJoint *) x));
}
static void *_p_b2CircleShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2CircleShape *) x));
}
static void *_p_b2PolygonShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2PolygonShape *) x));
}
static void *_p_b2EdgeShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2EdgeShape *) x));
}
static swig_type_info _swigt__p_b2AABB = {"_p_b2AABB", "b2AABB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Body = {"_p_b2Body", "b2Body *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BodyDef = {"_p_b2BodyDef", "b2BodyDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2CircleShape = {"_p_b2CircleShape", "b2CircleShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Color = {"_p_b2Color", "b2Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactEdge = {"_p_b2ContactEdge", "b2ContactEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Draw = {"_p_b2Draw", "b2Draw *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2EdgeShape = {"_p_b2EdgeShape", "b2EdgeShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Filter = {"_p_b2Filter", "b2Filter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Fixture = {"_p_b2Fixture", "b2Fixture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FixtureDef = {"_p_b2FixtureDef", "b2FixtureDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Jacobian = {"_p_b2Jacobian", "b2Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Joint = {"_p_b2Joint", "b2Joint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointDef = {"_p_b2JointDef", "b2JointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointEdge = {"_p_b2JointEdge", "b2JointEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MassData = {"_p_b2MassData", "b2MassData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MotorJoint = {"_p_b2MotorJoint", "b2MotorJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MotorJointDef = {"_p_b2MotorJointDef", "b2MotorJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleColor = {"_p_b2ParticleColor", "b2ParticleColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleDef = {"_p_b2ParticleDef", "b2ParticleDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleGroup = {"_p_b2ParticleGroup", "b2ParticleGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleGroupDef = {"_p_b2ParticleGroupDef", "b2ParticleGroupDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticlePair = {"_p_b2ParticlePair", "b2ParticlePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleSystem = {"_p_b2ParticleSystem", "b2ParticleSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleSystemDef = {"_p_b2ParticleSystemDef", "b2ParticleSystemDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ParticleTriad = {"_p_b2ParticleTriad", "b2ParticleTriad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PolygonShape = {"_p_b2PolygonShape", "b2PolygonShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2QueryCallback = {"_p_b2QueryCallback", "b2QueryCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RayCastInput = {"_p_b2RayCastInput", "b2RayCastInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RayCastOutput = {"_p_b2RayCastOutput", "b2RayCastOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJoint = {"_p_b2RevoluteJoint", "b2RevoluteJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJointDef = {"_p_b2RevoluteJointDef", "b2RevoluteJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Shape = {"_p_b2Shape", "b2Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Transform = {"_p_b2Transform", "b2Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec2 = {"_p_b2Vec2", "b2Vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Version = {"_p_b2Version", "b2Version *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2World = {"_p_b2World", "b2World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "float64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|float32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_b2AABB,
  &_swigt__p_b2Body,
  &_swigt__p_b2BodyDef,
  &_swigt__p_b2CircleShape,
  &_swigt__p_b2Color,
  &_swigt__p_b2ContactEdge,
  &_swigt__p_b2Draw,
  &_swigt__p_b2EdgeShape,
  &_swigt__p_b2Filter,
  &_swigt__p_b2Fixture,
  &_swigt__p_b2FixtureDef,
  &_swigt__p_b2Jacobian,
  &_swigt__p_b2Joint,
  &_swigt__p_b2JointDef,
  &_swigt__p_b2JointEdge,
  &_swigt__p_b2MassData,
  &_swigt__p_b2MotorJoint,
  &_swigt__p_b2MotorJointDef,
  &_swigt__p_b2ParticleColor,
  &_swigt__p_b2ParticleDef,
  &_swigt__p_b2ParticleGroup,
  &_swigt__p_b2ParticleGroupDef,
  &_swigt__p_b2ParticlePair,
  &_swigt__p_b2ParticleSystem,
  &_swigt__p_b2ParticleSystemDef,
  &_swigt__p_b2ParticleTriad,
  &_swigt__p_b2PolygonShape,
  &_swigt__p_b2QueryCallback,
  &_swigt__p_b2RayCastInput,
  &_swigt__p_b2RayCastOutput,
  &_swigt__p_b2RevoluteJoint,
  &_swigt__p_b2RevoluteJointDef,
  &_swigt__p_b2Shape,
  &_swigt__p_b2Transform,
  &_swigt__p_b2Vec2,
  &_swigt__p_b2Version,
  &_swigt__p_b2World,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_b2AABB[] = {  {&_swigt__p_b2AABB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Body[] = {  {&_swigt__p_b2Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BodyDef[] = {  {&_swigt__p_b2BodyDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2CircleShape[] = {  {&_swigt__p_b2CircleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Color[] = {  {&_swigt__p_b2Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactEdge[] = {  {&_swigt__p_b2ContactEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Draw[] = {  {&_swigt__p_b2Draw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2EdgeShape[] = {  {&_swigt__p_b2EdgeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Filter[] = {  {&_swigt__p_b2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Fixture[] = {  {&_swigt__p_b2Fixture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FixtureDef[] = {  {&_swigt__p_b2FixtureDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Jacobian[] = {  {&_swigt__p_b2Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Joint[] = {  {&_swigt__p_b2RevoluteJoint, _p_b2RevoluteJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2MotorJoint, _p_b2MotorJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2Joint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointDef[] = {  {&_swigt__p_b2JointDef, 0, 0, 0},  {&_swigt__p_b2RevoluteJointDef, _p_b2RevoluteJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2MotorJointDef, _p_b2MotorJointDefTo_p_b2JointDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointEdge[] = {  {&_swigt__p_b2JointEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MassData[] = {  {&_swigt__p_b2MassData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MotorJoint[] = {  {&_swigt__p_b2MotorJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MotorJointDef[] = {  {&_swigt__p_b2MotorJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleColor[] = {  {&_swigt__p_b2ParticleColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleDef[] = {  {&_swigt__p_b2ParticleDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleGroup[] = {  {&_swigt__p_b2ParticleGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleGroupDef[] = {  {&_swigt__p_b2ParticleGroupDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticlePair[] = {  {&_swigt__p_b2ParticlePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleSystem[] = {  {&_swigt__p_b2ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleSystemDef[] = {  {&_swigt__p_b2ParticleSystemDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ParticleTriad[] = {  {&_swigt__p_b2ParticleTriad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PolygonShape[] = {  {&_swigt__p_b2PolygonShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2QueryCallback[] = {  {&_swigt__p_b2QueryCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RayCastInput[] = {  {&_swigt__p_b2RayCastInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RayCastOutput[] = {  {&_swigt__p_b2RayCastOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJoint[] = {  {&_swigt__p_b2RevoluteJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJointDef[] = {  {&_swigt__p_b2RevoluteJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Shape[] = {  {&_swigt__p_b2CircleShape, _p_b2CircleShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2PolygonShape, _p_b2PolygonShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2Shape, 0, 0, 0},  {&_swigt__p_b2EdgeShape, _p_b2EdgeShapeTo_p_b2Shape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Transform[] = {  {&_swigt__p_b2Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec2[] = {  {&_swigt__p_b2Vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Version[] = {  {&_swigt__p_b2Version, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2World[] = {  {&_swigt__p_b2World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_b2AABB,
  _swigc__p_b2Body,
  _swigc__p_b2BodyDef,
  _swigc__p_b2CircleShape,
  _swigc__p_b2Color,
  _swigc__p_b2ContactEdge,
  _swigc__p_b2Draw,
  _swigc__p_b2EdgeShape,
  _swigc__p_b2Filter,
  _swigc__p_b2Fixture,
  _swigc__p_b2FixtureDef,
  _swigc__p_b2Jacobian,
  _swigc__p_b2Joint,
  _swigc__p_b2JointDef,
  _swigc__p_b2JointEdge,
  _swigc__p_b2MassData,
  _swigc__p_b2MotorJoint,
  _swigc__p_b2MotorJointDef,
  _swigc__p_b2ParticleColor,
  _swigc__p_b2ParticleDef,
  _swigc__p_b2ParticleGroup,
  _swigc__p_b2ParticleGroupDef,
  _swigc__p_b2ParticlePair,
  _swigc__p_b2ParticleSystem,
  _swigc__p_b2ParticleSystemDef,
  _swigc__p_b2ParticleTriad,
  _swigc__p_b2PolygonShape,
  _swigc__p_b2QueryCallback,
  _swigc__p_b2RayCastInput,
  _swigc__p_b2RayCastOutput,
  _swigc__p_b2RevoluteJoint,
  _swigc__p_b2RevoluteJointDef,
  _swigc__p_b2Shape,
  _swigc__p_b2Transform,
  _swigc__p_b2Vec2,
  _swigc__p_b2Version,
  _swigc__p_b2World,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_liquidfun(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mLiquidfun = rb_define_module("Liquidfun");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_const(mLiquidfun, "B2_ASSERT_ENABLED", SWIG_From_int(static_cast< int >(0)));
  rb_define_const(mLiquidfun, "B2_PI", SWIG_From_double(static_cast< double >(3.14159265359)));
  rb_define_const(mLiquidfun, "LIQUIDFUN_EXTERNAL_LANGUAGE_API", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mLiquidfun, "B2_MAXMANIFOLDPOINTS", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mLiquidfun, "B2_MAXPOLYGONVERTICES", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mLiquidfun, "B2_AABBEXTENSION", SWIG_From_double(static_cast< double >(0.1)));
  rb_define_const(mLiquidfun, "B2_AABBMULTIPLIER", SWIG_From_double(static_cast< double >(2.0)));
  rb_define_const(mLiquidfun, "B2_LINEARSLOP", SWIG_From_double(static_cast< double >(0.005)));
  rb_define_const(mLiquidfun, "B2_ANGULARSLOP", SWIG_From_double(static_cast< double >((2.0/180.0*3.14159265359))));
  rb_define_const(mLiquidfun, "B2_POLYGONRADIUS", SWIG_From_double(static_cast< double >((2.0*0.005))));
  rb_define_const(mLiquidfun, "B2_MAXSUBSTEPS", SWIG_From_int(static_cast< int >(8)));
  rb_define_const(mLiquidfun, "B2_MAXTOICONTACTS", SWIG_From_int(static_cast< int >(32)));
  rb_define_const(mLiquidfun, "B2_VELOCITYTHRESHOLD", SWIG_From_double(static_cast< double >(1.0)));
  rb_define_const(mLiquidfun, "B2_MAXLINEARCORRECTION", SWIG_From_double(static_cast< double >(0.2)));
  rb_define_const(mLiquidfun, "B2_MAXANGULARCORRECTION", SWIG_From_double(static_cast< double >((8.0/180.0*3.14159265359))));
  rb_define_const(mLiquidfun, "B2_MAXTRANSLATION", SWIG_From_double(static_cast< double >(2.0)));
  rb_define_const(mLiquidfun, "B2_MAXTRANSLATIONSQUARED", SWIG_From_double(static_cast< double >((2.0*2.0))));
  rb_define_const(mLiquidfun, "B2_MAXROTATION", SWIG_From_double(static_cast< double >((0.5*3.14159265359))));
  rb_define_const(mLiquidfun, "B2_MAXROTATIONSQUARED", SWIG_From_double(static_cast< double >(((0.5*3.14159265359)*(0.5*3.14159265359)))));
  rb_define_const(mLiquidfun, "B2_BAUMGARTE", SWIG_From_double(static_cast< double >(0.2)));
  rb_define_const(mLiquidfun, "B2_TOIBAUGARTE", SWIG_From_double(static_cast< double >(0.75)));
  rb_define_const(mLiquidfun, "B2_INVALIDPARTICLEINDEX", SWIG_From_int(static_cast< int >((-1))));
  rb_define_const(mLiquidfun, "B2_MAXPARTICLEINDEX", SWIG_From_int(static_cast< int >(0x7FFFFFFF)));
  rb_define_const(mLiquidfun, "B2_PARTICLESTRIDE", SWIG_From_double(static_cast< double >(0.75)));
  rb_define_const(mLiquidfun, "B2_MINPARTICLEWEIGHT", SWIG_From_double(static_cast< double >(1.0)));
  rb_define_const(mLiquidfun, "B2_MAXPARTICLEPRESSURE", SWIG_From_double(static_cast< double >(0.25)));
  rb_define_const(mLiquidfun, "B2_MAXPARTICLEFORCE", SWIG_From_double(static_cast< double >(0.5)));
  rb_define_const(mLiquidfun, "B2_MAXTRIADDISTANCE", SWIG_From_int(static_cast< int >(2)));
  rb_define_const(mLiquidfun, "B2_MAXTRIADDISTANCESQUARED", SWIG_From_int(static_cast< int >((2*2))));
  rb_define_const(mLiquidfun, "B2_MINPARTICLESYSTEMBUFFERCAPACITY", SWIG_From_int(static_cast< int >(256)));
  rb_define_const(mLiquidfun, "B2_BARRIERCOLLISIONTIME", SWIG_From_double(static_cast< double >(2.5)));
  rb_define_const(mLiquidfun, "B2_TIMETOSLEEP", SWIG_From_double(static_cast< double >(0.5)));
  rb_define_const(mLiquidfun, "B2_LINEARSLEEPTOLERANCE", SWIG_From_double(static_cast< double >(0.01)));
  rb_define_const(mLiquidfun, "B2_ANGULARSLEEPTOLERANCE", SWIG_From_double(static_cast< double >((2.0/180.0*3.14159265359))));
  
  SwigClassB2Version.klass = rb_define_class_under(mLiquidfun, "B2Version", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Version, (void *) &SwigClassB2Version);
  rb_define_alloc_func(SwigClassB2Version.klass, _wrap_B2Version_allocate);
  rb_define_method(SwigClassB2Version.klass, "initialize", VALUEFUNC(_wrap_new_B2Version), -1);
  rb_define_method(SwigClassB2Version.klass, "major=", VALUEFUNC(_wrap_B2Version_major_set), -1);
  rb_define_method(SwigClassB2Version.klass, "major", VALUEFUNC(_wrap_B2Version_major_get), -1);
  rb_define_method(SwigClassB2Version.klass, "minor=", VALUEFUNC(_wrap_B2Version_minor_set), -1);
  rb_define_method(SwigClassB2Version.klass, "minor", VALUEFUNC(_wrap_B2Version_minor_get), -1);
  rb_define_method(SwigClassB2Version.klass, "revision=", VALUEFUNC(_wrap_B2Version_revision_set), -1);
  rb_define_method(SwigClassB2Version.klass, "revision", VALUEFUNC(_wrap_B2Version_revision_get), -1);
  SwigClassB2Version.mark = 0;
  SwigClassB2Version.destroy = (void (*)(void *)) free_b2Version;
  SwigClassB2Version.trackObjects = 1;
  
  SwigClassB2MassData.klass = rb_define_class_under(mLiquidfun, "B2MassData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2MassData, (void *) &SwigClassB2MassData);
  rb_undef_alloc_func(SwigClassB2MassData.klass);
  rb_define_method(SwigClassB2MassData.klass, "mass=", VALUEFUNC(_wrap_B2MassData_mass_set), -1);
  rb_define_method(SwigClassB2MassData.klass, "mass", VALUEFUNC(_wrap_B2MassData_mass_get), -1);
  rb_define_method(SwigClassB2MassData.klass, "center=", VALUEFUNC(_wrap_B2MassData_center_set), -1);
  rb_define_method(SwigClassB2MassData.klass, "center", VALUEFUNC(_wrap_B2MassData_center_get), -1);
  rb_define_method(SwigClassB2MassData.klass, "I=", VALUEFUNC(_wrap_B2MassData_I_set), -1);
  rb_define_method(SwigClassB2MassData.klass, "I", VALUEFUNC(_wrap_B2MassData_I_get), -1);
  SwigClassB2MassData.mark = 0;
  SwigClassB2MassData.destroy = (void (*)(void *)) free_b2MassData;
  SwigClassB2MassData.trackObjects = 1;
  
  SwigClassB2Shape.klass = rb_define_class_under(mLiquidfun, "B2Shape", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Shape, (void *) &SwigClassB2Shape);
  rb_undef_alloc_func(SwigClassB2Shape.klass);
  rb_define_const(SwigClassB2Shape.klass, "CIRCLE", SWIG_From_int(static_cast< int >(b2Shape::e_circle)));
  rb_define_const(SwigClassB2Shape.klass, "EDGE", SWIG_From_int(static_cast< int >(b2Shape::e_edge)));
  rb_define_const(SwigClassB2Shape.klass, "POLYGON", SWIG_From_int(static_cast< int >(b2Shape::e_polygon)));
  rb_define_const(SwigClassB2Shape.klass, "CHAIN", SWIG_From_int(static_cast< int >(b2Shape::e_chain)));
  rb_define_const(SwigClassB2Shape.klass, "E_TYPECOUNT", SWIG_From_int(static_cast< int >(b2Shape::e_typeCount)));
  rb_define_method(SwigClassB2Shape.klass, "get_child_count", VALUEFUNC(_wrap_B2Shape_get_child_count), -1);
  rb_define_method(SwigClassB2Shape.klass, "test_point", VALUEFUNC(_wrap_B2Shape_test_point), -1);
  rb_define_method(SwigClassB2Shape.klass, "compute_mass", VALUEFUNC(_wrap_B2Shape_compute_mass), -1);
  rb_define_method(SwigClassB2Shape.klass, "m_type=", VALUEFUNC(_wrap_B2Shape_m_type_set), -1);
  rb_define_method(SwigClassB2Shape.klass, "m_type", VALUEFUNC(_wrap_B2Shape_m_type_get), -1);
  rb_define_method(SwigClassB2Shape.klass, "m_radius=", VALUEFUNC(_wrap_B2Shape_m_radius_set), -1);
  rb_define_method(SwigClassB2Shape.klass, "m_radius", VALUEFUNC(_wrap_B2Shape_m_radius_get), -1);
  SwigClassB2Shape.mark = 0;
  SwigClassB2Shape.destroy = (void (*)(void *)) free_b2Shape;
  SwigClassB2Shape.trackObjects = 1;
  
  SwigClassB2CircleShape.klass = rb_define_class_under(mLiquidfun, "B2CircleShape", ((swig_class *) SWIGTYPE_p_b2Shape->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2CircleShape, (void *) &SwigClassB2CircleShape);
  rb_define_alloc_func(SwigClassB2CircleShape.klass, _wrap_B2CircleShape_allocate);
  rb_define_method(SwigClassB2CircleShape.klass, "initialize", VALUEFUNC(_wrap_new_B2CircleShape), -1);
  rb_define_method(SwigClassB2CircleShape.klass, "set_position", VALUEFUNC(_wrap_B2CircleShape_set_position), -1);
  rb_define_method(SwigClassB2CircleShape.klass, "get_position_x", VALUEFUNC(_wrap_B2CircleShape_get_position_x), -1);
  rb_define_method(SwigClassB2CircleShape.klass, "get_position_y", VALUEFUNC(_wrap_B2CircleShape_get_position_y), -1);
  SwigClassB2CircleShape.mark = 0;
  SwigClassB2CircleShape.destroy = (void (*)(void *)) free_b2CircleShape;
  SwigClassB2CircleShape.trackObjects = 1;
  
  SwigClassB2EdgeShape.klass = rb_define_class_under(mLiquidfun, "B2EdgeShape", ((swig_class *) SWIGTYPE_p_b2Shape->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2EdgeShape, (void *) &SwigClassB2EdgeShape);
  rb_define_alloc_func(SwigClassB2EdgeShape.klass, _wrap_B2EdgeShape_allocate);
  rb_define_method(SwigClassB2EdgeShape.klass, "initialize", VALUEFUNC(_wrap_new_B2EdgeShape), -1);
  rb_define_method(SwigClassB2EdgeShape.klass, "set", VALUEFUNC(_wrap_B2EdgeShape_set), -1);
  SwigClassB2EdgeShape.mark = 0;
  SwigClassB2EdgeShape.destroy = (void (*)(void *)) free_b2EdgeShape;
  SwigClassB2EdgeShape.trackObjects = 1;
  
  SwigClassB2PolygonShape.klass = rb_define_class_under(mLiquidfun, "B2PolygonShape", ((swig_class *) SWIGTYPE_p_b2Shape->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2PolygonShape, (void *) &SwigClassB2PolygonShape);
  rb_define_alloc_func(SwigClassB2PolygonShape.klass, _wrap_B2PolygonShape_allocate);
  rb_define_method(SwigClassB2PolygonShape.klass, "initialize", VALUEFUNC(_wrap_new_B2PolygonShape), -1);
  rb_define_method(SwigClassB2PolygonShape.klass, "set_centroid", VALUEFUNC(_wrap_B2PolygonShape_set_centroid), -1);
  rb_define_method(SwigClassB2PolygonShape.klass, "set_as_box", VALUEFUNC(_wrap_B2PolygonShape_set_as_box), -1);
  SwigClassB2PolygonShape.mark = 0;
  SwigClassB2PolygonShape.destroy = (void (*)(void *)) free_b2PolygonShape;
  SwigClassB2PolygonShape.trackObjects = 1;
  
  SwigClassB2Color.klass = rb_define_class_under(mLiquidfun, "B2Color", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Color, (void *) &SwigClassB2Color);
  rb_define_alloc_func(SwigClassB2Color.klass, _wrap_B2Color_allocate);
  rb_define_method(SwigClassB2Color.klass, "initialize", VALUEFUNC(_wrap_new_B2Color), -1);
  rb_define_method(SwigClassB2Color.klass, "set", VALUEFUNC(_wrap_B2Color_set), -1);
  rb_define_method(SwigClassB2Color.klass, "r=", VALUEFUNC(_wrap_B2Color_r_set), -1);
  rb_define_method(SwigClassB2Color.klass, "r", VALUEFUNC(_wrap_B2Color_r_get), -1);
  rb_define_method(SwigClassB2Color.klass, "g=", VALUEFUNC(_wrap_B2Color_g_set), -1);
  rb_define_method(SwigClassB2Color.klass, "g", VALUEFUNC(_wrap_B2Color_g_get), -1);
  rb_define_method(SwigClassB2Color.klass, "b=", VALUEFUNC(_wrap_B2Color_b_set), -1);
  rb_define_method(SwigClassB2Color.klass, "b", VALUEFUNC(_wrap_B2Color_b_get), -1);
  SwigClassB2Color.mark = 0;
  SwigClassB2Color.destroy = (void (*)(void *)) free_b2Color;
  SwigClassB2Color.trackObjects = 1;
  rb_define_module_function(mLiquidfun, "disown_B2Draw", VALUEFUNC(_wrap_disown_B2Draw), -1);
  
  SwigClassB2Draw.klass = rb_define_class_under(mLiquidfun, "B2Draw", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Draw, (void *) &SwigClassB2Draw);
  rb_define_alloc_func(SwigClassB2Draw.klass, _wrap_B2Draw_allocate);
  rb_define_method(SwigClassB2Draw.klass, "initialize", VALUEFUNC(_wrap_new_B2Draw), -1);
  rb_define_const(SwigClassB2Draw.klass, "SHAPE_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_shapeBit)));
  rb_define_const(SwigClassB2Draw.klass, "JOINT_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_jointBit)));
  rb_define_const(SwigClassB2Draw.klass, "AABB_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_aabbBit)));
  rb_define_const(SwigClassB2Draw.klass, "PAIR_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_pairBit)));
  rb_define_const(SwigClassB2Draw.klass, "CENTER_OF_MASS_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_centerOfMassBit)));
  rb_define_const(SwigClassB2Draw.klass, "PARTICLE_BIT", SWIG_From_int(static_cast< int >(b2Draw::e_particleBit)));
  rb_define_method(SwigClassB2Draw.klass, "set_flags", VALUEFUNC(_wrap_B2Draw_set_flags), -1);
  rb_define_method(SwigClassB2Draw.klass, "get_flags", VALUEFUNC(_wrap_B2Draw_get_flags), -1);
  rb_define_method(SwigClassB2Draw.klass, "append_flags", VALUEFUNC(_wrap_B2Draw_append_flags), -1);
  rb_define_method(SwigClassB2Draw.klass, "clear_flags", VALUEFUNC(_wrap_B2Draw_clear_flags), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_polygon", VALUEFUNC(_wrap_B2Draw_draw_polygon), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_solid_polygon", VALUEFUNC(_wrap_B2Draw_draw_solid_polygon), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_circle", VALUEFUNC(_wrap_B2Draw_draw_circle), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_solid_circle", VALUEFUNC(_wrap_B2Draw_draw_solid_circle), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_particles", VALUEFUNC(_wrap_B2Draw_draw_particles), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_segment", VALUEFUNC(_wrap_B2Draw_draw_segment), -1);
  rb_define_method(SwigClassB2Draw.klass, "draw_transform", VALUEFUNC(_wrap_B2Draw_draw_transform), -1);
  SwigClassB2Draw.mark = 0;
  SwigClassB2Draw.destroy = (void (*)(void *)) free_b2Draw;
  SwigClassB2Draw.trackObjects = 1;
  
  SwigClassB2Vec2.klass = rb_define_class_under(mLiquidfun, "B2Vec2", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Vec2, (void *) &SwigClassB2Vec2);
  rb_define_alloc_func(SwigClassB2Vec2.klass, _wrap_B2Vec2_allocate);
  rb_define_method(SwigClassB2Vec2.klass, "initialize", VALUEFUNC(_wrap_new_B2Vec2), -1);
  rb_define_method(SwigClassB2Vec2.klass, "set", VALUEFUNC(_wrap_B2Vec2_set), -1);
  rb_define_method(SwigClassB2Vec2.klass, "x=", VALUEFUNC(_wrap_B2Vec2_x_set), -1);
  rb_define_method(SwigClassB2Vec2.klass, "x", VALUEFUNC(_wrap_B2Vec2_x_get), -1);
  rb_define_method(SwigClassB2Vec2.klass, "y=", VALUEFUNC(_wrap_B2Vec2_y_set), -1);
  rb_define_method(SwigClassB2Vec2.klass, "y", VALUEFUNC(_wrap_B2Vec2_y_get), -1);
  SwigClassB2Vec2.mark = 0;
  SwigClassB2Vec2.destroy = (void (*)(void *)) free_b2Vec2;
  SwigClassB2Vec2.trackObjects = 1;
  
  SwigClassB2Transform.klass = rb_define_class_under(mLiquidfun, "B2Transform", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Transform, (void *) &SwigClassB2Transform);
  rb_define_alloc_func(SwigClassB2Transform.klass, _wrap_B2Transform_allocate);
  rb_define_method(SwigClassB2Transform.klass, "initialize", VALUEFUNC(_wrap_new_B2Transform), -1);
  rb_define_method(SwigClassB2Transform.klass, "set_identity", VALUEFUNC(_wrap_B2Transform_set_identity), -1);
  rb_define_method(SwigClassB2Transform.klass, "get_position_x", VALUEFUNC(_wrap_B2Transform_get_position_x), -1);
  rb_define_method(SwigClassB2Transform.klass, "get_position_y", VALUEFUNC(_wrap_B2Transform_get_position_y), -1);
  rb_define_method(SwigClassB2Transform.klass, "get_rotation_sin", VALUEFUNC(_wrap_B2Transform_get_rotation_sin), -1);
  rb_define_method(SwigClassB2Transform.klass, "get_rotation_cos", VALUEFUNC(_wrap_B2Transform_get_rotation_cos), -1);
  SwigClassB2Transform.mark = 0;
  SwigClassB2Transform.destroy = (void (*)(void *)) free_b2Transform;
  SwigClassB2Transform.trackObjects = 1;
  rb_define_const(mLiquidfun, "B2_STATIC_BODY", SWIG_From_int(static_cast< int >(b2_staticBody)));
  rb_define_const(mLiquidfun, "B2_KINEMATIC_BODY", SWIG_From_int(static_cast< int >(b2_kinematicBody)));
  rb_define_const(mLiquidfun, "B2_DYNAMIC_BODY", SWIG_From_int(static_cast< int >(b2_dynamicBody)));
  
  SwigClassB2BodyDef.klass = rb_define_class_under(mLiquidfun, "B2BodyDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2BodyDef, (void *) &SwigClassB2BodyDef);
  rb_define_alloc_func(SwigClassB2BodyDef.klass, _wrap_B2BodyDef_allocate);
  rb_define_method(SwigClassB2BodyDef.klass, "initialize", VALUEFUNC(_wrap_new_B2BodyDef), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "set_position", VALUEFUNC(_wrap_B2BodyDef_set_position), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "type=", VALUEFUNC(_wrap_B2BodyDef_type_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "type", VALUEFUNC(_wrap_B2BodyDef_type_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "position=", VALUEFUNC(_wrap_B2BodyDef_position_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "position", VALUEFUNC(_wrap_B2BodyDef_position_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angle=", VALUEFUNC(_wrap_B2BodyDef_angle_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angle", VALUEFUNC(_wrap_B2BodyDef_angle_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "linearVelocity=", VALUEFUNC(_wrap_B2BodyDef_linearVelocity_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "linearVelocity", VALUEFUNC(_wrap_B2BodyDef_linearVelocity_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angularVelocity=", VALUEFUNC(_wrap_B2BodyDef_angularVelocity_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angularVelocity", VALUEFUNC(_wrap_B2BodyDef_angularVelocity_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "linearDamping=", VALUEFUNC(_wrap_B2BodyDef_linearDamping_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "linearDamping", VALUEFUNC(_wrap_B2BodyDef_linearDamping_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angularDamping=", VALUEFUNC(_wrap_B2BodyDef_angularDamping_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "angularDamping", VALUEFUNC(_wrap_B2BodyDef_angularDamping_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "allowSleep=", VALUEFUNC(_wrap_B2BodyDef_allowSleep_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "allowSleep", VALUEFUNC(_wrap_B2BodyDef_allowSleep_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "awake=", VALUEFUNC(_wrap_B2BodyDef_awake_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "awake", VALUEFUNC(_wrap_B2BodyDef_awake_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "fixedRotation=", VALUEFUNC(_wrap_B2BodyDef_fixedRotation_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "fixedRotation", VALUEFUNC(_wrap_B2BodyDef_fixedRotation_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "bullet=", VALUEFUNC(_wrap_B2BodyDef_bullet_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "bullet", VALUEFUNC(_wrap_B2BodyDef_bullet_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "active=", VALUEFUNC(_wrap_B2BodyDef_active_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "active", VALUEFUNC(_wrap_B2BodyDef_active_get), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "gravityScale=", VALUEFUNC(_wrap_B2BodyDef_gravityScale_set), -1);
  rb_define_method(SwigClassB2BodyDef.klass, "gravityScale", VALUEFUNC(_wrap_B2BodyDef_gravityScale_get), -1);
  SwigClassB2BodyDef.mark = 0;
  SwigClassB2BodyDef.destroy = (void (*)(void *)) free_b2BodyDef;
  SwigClassB2BodyDef.trackObjects = 1;
  
  SwigClassB2Body.klass = rb_define_class_under(mLiquidfun, "B2Body", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Body, (void *) &SwigClassB2Body);
  rb_undef_alloc_func(SwigClassB2Body.klass);
  rb_define_method(SwigClassB2Body.klass, "create_fixture", VALUEFUNC(_wrap_B2Body_create_fixture), -1);
  rb_define_method(SwigClassB2Body.klass, "destroy_fixture", VALUEFUNC(_wrap_B2Body_destroy_fixture), -1);
  rb_define_method(SwigClassB2Body.klass, "get_transform", VALUEFUNC(_wrap_B2Body_get_transform), -1);
  rb_define_method(SwigClassB2Body.klass, "get_position", VALUEFUNC(_wrap_B2Body_get_position), -1);
  rb_define_method(SwigClassB2Body.klass, "get_angle", VALUEFUNC(_wrap_B2Body_get_angle), -1);
  rb_define_method(SwigClassB2Body.klass, "get_world_center", VALUEFUNC(_wrap_B2Body_get_world_center), -1);
  rb_define_method(SwigClassB2Body.klass, "get_local_center", VALUEFUNC(_wrap_B2Body_get_local_center), -1);
  rb_define_method(SwigClassB2Body.klass, "set_linear_velocity", VALUEFUNC(_wrap_B2Body_set_linear_velocity), -1);
  rb_define_method(SwigClassB2Body.klass, "get_linear_velocity", VALUEFUNC(_wrap_B2Body_get_linear_velocity), -1);
  rb_define_method(SwigClassB2Body.klass, "set_angular_velocity", VALUEFUNC(_wrap_B2Body_set_angular_velocity), -1);
  rb_define_method(SwigClassB2Body.klass, "get_angular_velocity", VALUEFUNC(_wrap_B2Body_get_angular_velocity), -1);
  rb_define_method(SwigClassB2Body.klass, "apply_force", VALUEFUNC(_wrap_B2Body_apply_force), -1);
  rb_define_method(SwigClassB2Body.klass, "apply_force_to_center", VALUEFUNC(_wrap_B2Body_apply_force_to_center), -1);
  rb_define_method(SwigClassB2Body.klass, "apply_torque", VALUEFUNC(_wrap_B2Body_apply_torque), -1);
  rb_define_method(SwigClassB2Body.klass, "apply_linear_impulse", VALUEFUNC(_wrap_B2Body_apply_linear_impulse), -1);
  rb_define_method(SwigClassB2Body.klass, "apply_angular_impulse", VALUEFUNC(_wrap_B2Body_apply_angular_impulse), -1);
  rb_define_method(SwigClassB2Body.klass, "get_mass", VALUEFUNC(_wrap_B2Body_get_mass), -1);
  rb_define_method(SwigClassB2Body.klass, "get_inertia", VALUEFUNC(_wrap_B2Body_get_inertia), -1);
  rb_define_method(SwigClassB2Body.klass, "get_mass_data", VALUEFUNC(_wrap_B2Body_get_mass_data), -1);
  rb_define_method(SwigClassB2Body.klass, "set_mass_data", VALUEFUNC(_wrap_B2Body_set_mass_data), -1);
  rb_define_method(SwigClassB2Body.klass, "reset_mass_data", VALUEFUNC(_wrap_B2Body_reset_mass_data), -1);
  rb_define_method(SwigClassB2Body.klass, "get_world_point", VALUEFUNC(_wrap_B2Body_get_world_point), -1);
  rb_define_method(SwigClassB2Body.klass, "get_world_vector", VALUEFUNC(_wrap_B2Body_get_world_vector), -1);
  rb_define_method(SwigClassB2Body.klass, "get_local_point", VALUEFUNC(_wrap_B2Body_get_local_point), -1);
  rb_define_method(SwigClassB2Body.klass, "get_local_vector", VALUEFUNC(_wrap_B2Body_get_local_vector), -1);
  rb_define_method(SwigClassB2Body.klass, "get_linear_velocity_from_world_point", VALUEFUNC(_wrap_B2Body_get_linear_velocity_from_world_point), -1);
  rb_define_method(SwigClassB2Body.klass, "get_linear_velocity_from_local_point", VALUEFUNC(_wrap_B2Body_get_linear_velocity_from_local_point), -1);
  rb_define_method(SwigClassB2Body.klass, "get_linear_damping", VALUEFUNC(_wrap_B2Body_get_linear_damping), -1);
  rb_define_method(SwigClassB2Body.klass, "set_linear_damping", VALUEFUNC(_wrap_B2Body_set_linear_damping), -1);
  rb_define_method(SwigClassB2Body.klass, "get_angular_damping", VALUEFUNC(_wrap_B2Body_get_angular_damping), -1);
  rb_define_method(SwigClassB2Body.klass, "set_angular_damping", VALUEFUNC(_wrap_B2Body_set_angular_damping), -1);
  rb_define_method(SwigClassB2Body.klass, "get_gravity_scale", VALUEFUNC(_wrap_B2Body_get_gravity_scale), -1);
  rb_define_method(SwigClassB2Body.klass, "set_gravity_scale", VALUEFUNC(_wrap_B2Body_set_gravity_scale), -1);
  rb_define_method(SwigClassB2Body.klass, "set_type", VALUEFUNC(_wrap_B2Body_set_type), -1);
  rb_define_method(SwigClassB2Body.klass, "get_type", VALUEFUNC(_wrap_B2Body_get_type), -1);
  rb_define_method(SwigClassB2Body.klass, "set_bullet", VALUEFUNC(_wrap_B2Body_set_bullet), -1);
  rb_define_method(SwigClassB2Body.klass, "is_bullet", VALUEFUNC(_wrap_B2Body_is_bullet), -1);
  rb_define_method(SwigClassB2Body.klass, "set_sleeping_allowed", VALUEFUNC(_wrap_B2Body_set_sleeping_allowed), -1);
  rb_define_method(SwigClassB2Body.klass, "is_sleeping_allowed", VALUEFUNC(_wrap_B2Body_is_sleeping_allowed), -1);
  rb_define_method(SwigClassB2Body.klass, "set_awake", VALUEFUNC(_wrap_B2Body_set_awake), -1);
  rb_define_method(SwigClassB2Body.klass, "is_awake", VALUEFUNC(_wrap_B2Body_is_awake), -1);
  rb_define_method(SwigClassB2Body.klass, "set_active", VALUEFUNC(_wrap_B2Body_set_active), -1);
  rb_define_method(SwigClassB2Body.klass, "is_active", VALUEFUNC(_wrap_B2Body_is_active), -1);
  rb_define_method(SwigClassB2Body.klass, "set_fixed_rotation", VALUEFUNC(_wrap_B2Body_set_fixed_rotation), -1);
  rb_define_method(SwigClassB2Body.klass, "is_fixed_rotation", VALUEFUNC(_wrap_B2Body_is_fixed_rotation), -1);
  rb_define_method(SwigClassB2Body.klass, "get_fixture_list", VALUEFUNC(_wrap_B2Body_get_fixture_list), -1);
  rb_define_method(SwigClassB2Body.klass, "get_joint_list", VALUEFUNC(_wrap_B2Body_get_joint_list), -1);
  rb_define_method(SwigClassB2Body.klass, "get_contact_list", VALUEFUNC(_wrap_B2Body_get_contact_list), -1);
  rb_define_method(SwigClassB2Body.klass, "get_next", VALUEFUNC(_wrap_B2Body_get_next), -1);
  rb_define_method(SwigClassB2Body.klass, "get_world", VALUEFUNC(_wrap_B2Body_get_world), -1);
  rb_define_method(SwigClassB2Body.klass, "dump", VALUEFUNC(_wrap_B2Body_dump), -1);
  rb_define_method(SwigClassB2Body.klass, "get_position_x", VALUEFUNC(_wrap_B2Body_get_position_x), -1);
  rb_define_method(SwigClassB2Body.klass, "get_position_y", VALUEFUNC(_wrap_B2Body_get_position_y), -1);
  rb_define_method(SwigClassB2Body.klass, "set_transform", VALUEFUNC(_wrap_B2Body_set_transform), -1);
  SwigClassB2Body.mark = 0;
  SwigClassB2Body.trackObjects = 1;
  
  SwigClassB2Filter.klass = rb_define_class_under(mLiquidfun, "B2Filter", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Filter, (void *) &SwigClassB2Filter);
  rb_define_alloc_func(SwigClassB2Filter.klass, _wrap_B2Filter_allocate);
  rb_define_method(SwigClassB2Filter.klass, "initialize", VALUEFUNC(_wrap_new_B2Filter), -1);
  rb_define_method(SwigClassB2Filter.klass, "categoryBits=", VALUEFUNC(_wrap_B2Filter_categoryBits_set), -1);
  rb_define_method(SwigClassB2Filter.klass, "categoryBits", VALUEFUNC(_wrap_B2Filter_categoryBits_get), -1);
  rb_define_method(SwigClassB2Filter.klass, "maskBits=", VALUEFUNC(_wrap_B2Filter_maskBits_set), -1);
  rb_define_method(SwigClassB2Filter.klass, "maskBits", VALUEFUNC(_wrap_B2Filter_maskBits_get), -1);
  rb_define_method(SwigClassB2Filter.klass, "groupIndex=", VALUEFUNC(_wrap_B2Filter_groupIndex_set), -1);
  rb_define_method(SwigClassB2Filter.klass, "groupIndex", VALUEFUNC(_wrap_B2Filter_groupIndex_get), -1);
  SwigClassB2Filter.mark = 0;
  SwigClassB2Filter.destroy = (void (*)(void *)) free_b2Filter;
  SwigClassB2Filter.trackObjects = 1;
  
  SwigClassB2FixtureDef.klass = rb_define_class_under(mLiquidfun, "B2FixtureDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2FixtureDef, (void *) &SwigClassB2FixtureDef);
  rb_define_alloc_func(SwigClassB2FixtureDef.klass, _wrap_B2FixtureDef_allocate);
  rb_define_method(SwigClassB2FixtureDef.klass, "initialize", VALUEFUNC(_wrap_new_B2FixtureDef), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "shape=", VALUEFUNC(_wrap_B2FixtureDef_shape_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "shape", VALUEFUNC(_wrap_B2FixtureDef_shape_get), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "friction=", VALUEFUNC(_wrap_B2FixtureDef_friction_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "friction", VALUEFUNC(_wrap_B2FixtureDef_friction_get), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "restitution=", VALUEFUNC(_wrap_B2FixtureDef_restitution_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "restitution", VALUEFUNC(_wrap_B2FixtureDef_restitution_get), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "density=", VALUEFUNC(_wrap_B2FixtureDef_density_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "density", VALUEFUNC(_wrap_B2FixtureDef_density_get), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "isSensor=", VALUEFUNC(_wrap_B2FixtureDef_isSensor_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "isSensor", VALUEFUNC(_wrap_B2FixtureDef_isSensor_get), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "filter=", VALUEFUNC(_wrap_B2FixtureDef_filter_set), -1);
  rb_define_method(SwigClassB2FixtureDef.klass, "filter", VALUEFUNC(_wrap_B2FixtureDef_filter_get), -1);
  SwigClassB2FixtureDef.mark = 0;
  SwigClassB2FixtureDef.destroy = (void (*)(void *)) free_b2FixtureDef;
  SwigClassB2FixtureDef.trackObjects = 1;
  
  SwigClassB2Fixture.klass = rb_define_class_under(mLiquidfun, "B2Fixture", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Fixture, (void *) &SwigClassB2Fixture);
  rb_undef_alloc_func(SwigClassB2Fixture.klass);
  rb_define_method(SwigClassB2Fixture.klass, "get_type", VALUEFUNC(_wrap_B2Fixture_get_type), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_shape", VALUEFUNC(_wrap_B2Fixture_get_shape), -1);
  rb_define_method(SwigClassB2Fixture.klass, "set_sensor", VALUEFUNC(_wrap_B2Fixture_set_sensor), -1);
  rb_define_method(SwigClassB2Fixture.klass, "is_sensor", VALUEFUNC(_wrap_B2Fixture_is_sensor), -1);
  rb_define_method(SwigClassB2Fixture.klass, "set_filter_data", VALUEFUNC(_wrap_B2Fixture_set_filter_data), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_filter_data", VALUEFUNC(_wrap_B2Fixture_get_filter_data), -1);
  rb_define_method(SwigClassB2Fixture.klass, "refilter", VALUEFUNC(_wrap_B2Fixture_refilter), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_body", VALUEFUNC(_wrap_B2Fixture_get_body), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_next", VALUEFUNC(_wrap_B2Fixture_get_next), -1);
  rb_define_method(SwigClassB2Fixture.klass, "test_point", VALUEFUNC(_wrap_B2Fixture_test_point), -1);
  rb_define_method(SwigClassB2Fixture.klass, "compute_distance", VALUEFUNC(_wrap_B2Fixture_compute_distance), -1);
  rb_define_method(SwigClassB2Fixture.klass, "ray_cast", VALUEFUNC(_wrap_B2Fixture_ray_cast), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_mass_data", VALUEFUNC(_wrap_B2Fixture_get_mass_data), -1);
  rb_define_method(SwigClassB2Fixture.klass, "set_density", VALUEFUNC(_wrap_B2Fixture_set_density), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_density", VALUEFUNC(_wrap_B2Fixture_get_density), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_friction", VALUEFUNC(_wrap_B2Fixture_get_friction), -1);
  rb_define_method(SwigClassB2Fixture.klass, "set_friction", VALUEFUNC(_wrap_B2Fixture_set_friction), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_restitution", VALUEFUNC(_wrap_B2Fixture_get_restitution), -1);
  rb_define_method(SwigClassB2Fixture.klass, "set_restitution", VALUEFUNC(_wrap_B2Fixture_set_restitution), -1);
  rb_define_method(SwigClassB2Fixture.klass, "get_aabb", VALUEFUNC(_wrap_B2Fixture_get_aabb), -1);
  rb_define_method(SwigClassB2Fixture.klass, "dump", VALUEFUNC(_wrap_B2Fixture_dump), -1);
  SwigClassB2Fixture.mark = 0;
  SwigClassB2Fixture.trackObjects = 1;
  
  SwigClassB2World.klass = rb_define_class_under(mLiquidfun, "B2World", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2World, (void *) &SwigClassB2World);
  rb_define_alloc_func(SwigClassB2World.klass, _wrap_B2World_allocate);
  rb_define_method(SwigClassB2World.klass, "initialize", VALUEFUNC(_wrap_new_B2World), -1);
  rb_define_method(SwigClassB2World.klass, "set_debug_draw", VALUEFUNC(_wrap_B2World_set_debug_draw), -1);
  rb_define_method(SwigClassB2World.klass, "create_body", VALUEFUNC(_wrap_B2World_create_body), -1);
  rb_define_method(SwigClassB2World.klass, "destroy_body", VALUEFUNC(_wrap_B2World_destroy_body), -1);
  rb_define_method(SwigClassB2World.klass, "create_joint", VALUEFUNC(_wrap_B2World_create_joint), -1);
  rb_define_method(SwigClassB2World.klass, "destroy_joint", VALUEFUNC(_wrap_B2World_destroy_joint), -1);
  rb_define_method(SwigClassB2World.klass, "step", VALUEFUNC(_wrap_B2World_step), -1);
  rb_define_method(SwigClassB2World.klass, "draw_debug_data", VALUEFUNC(_wrap_B2World_draw_debug_data), -1);
  rb_define_method(SwigClassB2World.klass, "get_body_count", VALUEFUNC(_wrap_B2World_get_body_count), -1);
  rb_define_method(SwigClassB2World.klass, "create_particle_system", VALUEFUNC(_wrap_B2World_create_particle_system), -1);
  rb_define_method(SwigClassB2World.klass, "set_gravity", VALUEFUNC(_wrap_B2World_set_gravity), -1);
  SwigClassB2World.mark = (void (*)(void *)) mark_b2World;
  SwigClassB2World.destroy = (void (*)(void *)) free_b2World;
  SwigClassB2World.trackObjects = 1;
  rb_define_module_function(mLiquidfun, "disown_B2QueryCallback", VALUEFUNC(_wrap_disown_B2QueryCallback), -1);
  
  SwigClassB2QueryCallback.klass = rb_define_class_under(mLiquidfun, "B2QueryCallback", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2QueryCallback, (void *) &SwigClassB2QueryCallback);
  rb_define_alloc_func(SwigClassB2QueryCallback.klass, _wrap_B2QueryCallback_allocate);
  rb_define_method(SwigClassB2QueryCallback.klass, "initialize", VALUEFUNC(_wrap_new_B2QueryCallback), -1);
  rb_define_method(SwigClassB2QueryCallback.klass, "report_fixture", VALUEFUNC(_wrap_B2QueryCallback_report_fixture), -1);
  rb_define_method(SwigClassB2QueryCallback.klass, "report_particle", VALUEFUNC(_wrap_B2QueryCallback_report_particle), -1);
  SwigClassB2QueryCallback.mark = 0;
  SwigClassB2QueryCallback.destroy = (void (*)(void *)) free_b2QueryCallback;
  SwigClassB2QueryCallback.trackObjects = 1;
  rb_define_const(mLiquidfun, "JOINT_UNKNOWN", SWIG_From_int(static_cast< int >(e_unknownJoint)));
  rb_define_const(mLiquidfun, "JOINT_REVOLUTE", SWIG_From_int(static_cast< int >(e_revoluteJoint)));
  rb_define_const(mLiquidfun, "JOINT_PRISMATIC", SWIG_From_int(static_cast< int >(e_prismaticJoint)));
  rb_define_const(mLiquidfun, "JOINT_DISTANCE", SWIG_From_int(static_cast< int >(e_distanceJoint)));
  rb_define_const(mLiquidfun, "JOINT_PULLEY", SWIG_From_int(static_cast< int >(e_pulleyJoint)));
  rb_define_const(mLiquidfun, "JOINT_MOUSE", SWIG_From_int(static_cast< int >(e_mouseJoint)));
  rb_define_const(mLiquidfun, "JOINT_GEAR", SWIG_From_int(static_cast< int >(e_gearJoint)));
  rb_define_const(mLiquidfun, "JOINT_WHEEL", SWIG_From_int(static_cast< int >(e_wheelJoint)));
  rb_define_const(mLiquidfun, "JOINT_WELD", SWIG_From_int(static_cast< int >(e_weldJoint)));
  rb_define_const(mLiquidfun, "JOINT_FRICTION", SWIG_From_int(static_cast< int >(e_frictionJoint)));
  rb_define_const(mLiquidfun, "JOINT_ROPE", SWIG_From_int(static_cast< int >(e_ropeJoint)));
  rb_define_const(mLiquidfun, "JOINT_MOTOR", SWIG_From_int(static_cast< int >(e_motorJoint)));
  rb_define_const(mLiquidfun, "LIMIT_INACTIVE", SWIG_From_int(static_cast< int >(e_inactiveLimit)));
  rb_define_const(mLiquidfun, "LIMIT_LOWER", SWIG_From_int(static_cast< int >(e_atLowerLimit)));
  rb_define_const(mLiquidfun, "LIMIT_UPPER", SWIG_From_int(static_cast< int >(e_atUpperLimit)));
  rb_define_const(mLiquidfun, "LIMIT_EQUAL", SWIG_From_int(static_cast< int >(e_equalLimits)));
  
  SwigClassB2Jacobian.klass = rb_define_class_under(mLiquidfun, "B2Jacobian", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Jacobian, (void *) &SwigClassB2Jacobian);
  rb_define_alloc_func(SwigClassB2Jacobian.klass, _wrap_B2Jacobian_allocate);
  rb_define_method(SwigClassB2Jacobian.klass, "initialize", VALUEFUNC(_wrap_new_B2Jacobian), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "linear=", VALUEFUNC(_wrap_B2Jacobian_linear_set), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "linear", VALUEFUNC(_wrap_B2Jacobian_linear_get), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "angularA=", VALUEFUNC(_wrap_B2Jacobian_angularA_set), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "angularA", VALUEFUNC(_wrap_B2Jacobian_angularA_get), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "angularB=", VALUEFUNC(_wrap_B2Jacobian_angularB_set), -1);
  rb_define_method(SwigClassB2Jacobian.klass, "angularB", VALUEFUNC(_wrap_B2Jacobian_angularB_get), -1);
  SwigClassB2Jacobian.mark = 0;
  SwigClassB2Jacobian.destroy = (void (*)(void *)) free_b2Jacobian;
  SwigClassB2Jacobian.trackObjects = 1;
  
  SwigClassB2JointEdge.klass = rb_define_class_under(mLiquidfun, "B2JointEdge", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2JointEdge, (void *) &SwigClassB2JointEdge);
  rb_define_alloc_func(SwigClassB2JointEdge.klass, _wrap_B2JointEdge_allocate);
  rb_define_method(SwigClassB2JointEdge.klass, "initialize", VALUEFUNC(_wrap_new_B2JointEdge), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "other=", VALUEFUNC(_wrap_B2JointEdge_other_set), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "other", VALUEFUNC(_wrap_B2JointEdge_other_get), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "joint=", VALUEFUNC(_wrap_B2JointEdge_joint_set), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "joint", VALUEFUNC(_wrap_B2JointEdge_joint_get), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "prev=", VALUEFUNC(_wrap_B2JointEdge_prev_set), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "prev", VALUEFUNC(_wrap_B2JointEdge_prev_get), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "next=", VALUEFUNC(_wrap_B2JointEdge_next_set), -1);
  rb_define_method(SwigClassB2JointEdge.klass, "next", VALUEFUNC(_wrap_B2JointEdge_next_get), -1);
  SwigClassB2JointEdge.mark = 0;
  SwigClassB2JointEdge.destroy = (void (*)(void *)) free_b2JointEdge;
  SwigClassB2JointEdge.trackObjects = 1;
  
  SwigClassB2JointDef.klass = rb_define_class_under(mLiquidfun, "B2JointDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2JointDef, (void *) &SwigClassB2JointDef);
  rb_define_alloc_func(SwigClassB2JointDef.klass, _wrap_B2JointDef_allocate);
  rb_define_method(SwigClassB2JointDef.klass, "initialize", VALUEFUNC(_wrap_new_B2JointDef), -1);
  rb_define_method(SwigClassB2JointDef.klass, "type=", VALUEFUNC(_wrap_B2JointDef_type_set), -1);
  rb_define_method(SwigClassB2JointDef.klass, "type", VALUEFUNC(_wrap_B2JointDef_type_get), -1);
  rb_define_method(SwigClassB2JointDef.klass, "bodyA=", VALUEFUNC(_wrap_B2JointDef_bodyA_set), -1);
  rb_define_method(SwigClassB2JointDef.klass, "bodyA", VALUEFUNC(_wrap_B2JointDef_bodyA_get), -1);
  rb_define_method(SwigClassB2JointDef.klass, "bodyB=", VALUEFUNC(_wrap_B2JointDef_bodyB_set), -1);
  rb_define_method(SwigClassB2JointDef.klass, "bodyB", VALUEFUNC(_wrap_B2JointDef_bodyB_get), -1);
  rb_define_method(SwigClassB2JointDef.klass, "collideConnected=", VALUEFUNC(_wrap_B2JointDef_collideConnected_set), -1);
  rb_define_method(SwigClassB2JointDef.klass, "collideConnected", VALUEFUNC(_wrap_B2JointDef_collideConnected_get), -1);
  SwigClassB2JointDef.mark = 0;
  SwigClassB2JointDef.destroy = (void (*)(void *)) free_b2JointDef;
  SwigClassB2JointDef.trackObjects = 1;
  
  SwigClassB2Joint.klass = rb_define_class_under(mLiquidfun, "B2Joint", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2Joint, (void *) &SwigClassB2Joint);
  rb_undef_alloc_func(SwigClassB2Joint.klass);
  rb_define_method(SwigClassB2Joint.klass, "get_type", VALUEFUNC(_wrap_B2Joint_get_type), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_body_a", VALUEFUNC(_wrap_B2Joint_get_body_a), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_body_b", VALUEFUNC(_wrap_B2Joint_get_body_b), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_anchor_a", VALUEFUNC(_wrap_B2Joint_get_anchor_a), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_anchor_b", VALUEFUNC(_wrap_B2Joint_get_anchor_b), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_reaction_force", VALUEFUNC(_wrap_B2Joint_get_reaction_force), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_reaction_torque", VALUEFUNC(_wrap_B2Joint_get_reaction_torque), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_next", VALUEFUNC(_wrap_B2Joint_get_next), -1);
  rb_define_method(SwigClassB2Joint.klass, "is_active", VALUEFUNC(_wrap_B2Joint_is_active), -1);
  rb_define_method(SwigClassB2Joint.klass, "get_collide_connected", VALUEFUNC(_wrap_B2Joint_get_collide_connected), -1);
  rb_define_method(SwigClassB2Joint.klass, "dump", VALUEFUNC(_wrap_B2Joint_dump), -1);
  rb_define_method(SwigClassB2Joint.klass, "shift_origin", VALUEFUNC(_wrap_B2Joint_shift_origin), -1);
  SwigClassB2Joint.mark = 0;
  SwigClassB2Joint.trackObjects = 1;
  
  SwigClassB2RevoluteJointDef.klass = rb_define_class_under(mLiquidfun, "B2RevoluteJointDef", ((swig_class *) SWIGTYPE_p_b2JointDef->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2RevoluteJointDef, (void *) &SwigClassB2RevoluteJointDef);
  rb_define_alloc_func(SwigClassB2RevoluteJointDef.klass, _wrap_B2RevoluteJointDef_allocate);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "initialize", VALUEFUNC(_wrap_new_B2RevoluteJointDef), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "init", VALUEFUNC(_wrap_B2RevoluteJointDef_init), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "localAnchorA=", VALUEFUNC(_wrap_B2RevoluteJointDef_localAnchorA_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "localAnchorA", VALUEFUNC(_wrap_B2RevoluteJointDef_localAnchorA_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "localAnchorB=", VALUEFUNC(_wrap_B2RevoluteJointDef_localAnchorB_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "localAnchorB", VALUEFUNC(_wrap_B2RevoluteJointDef_localAnchorB_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "referenceAngle=", VALUEFUNC(_wrap_B2RevoluteJointDef_referenceAngle_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "referenceAngle", VALUEFUNC(_wrap_B2RevoluteJointDef_referenceAngle_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "enableLimit=", VALUEFUNC(_wrap_B2RevoluteJointDef_enableLimit_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "enableLimit", VALUEFUNC(_wrap_B2RevoluteJointDef_enableLimit_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "lowerAngle=", VALUEFUNC(_wrap_B2RevoluteJointDef_lowerAngle_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "lowerAngle", VALUEFUNC(_wrap_B2RevoluteJointDef_lowerAngle_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "upperAngle=", VALUEFUNC(_wrap_B2RevoluteJointDef_upperAngle_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "upperAngle", VALUEFUNC(_wrap_B2RevoluteJointDef_upperAngle_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "enableMotor=", VALUEFUNC(_wrap_B2RevoluteJointDef_enableMotor_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "enableMotor", VALUEFUNC(_wrap_B2RevoluteJointDef_enableMotor_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "motorSpeed=", VALUEFUNC(_wrap_B2RevoluteJointDef_motorSpeed_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "motorSpeed", VALUEFUNC(_wrap_B2RevoluteJointDef_motorSpeed_get), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "maxMotorTorque=", VALUEFUNC(_wrap_B2RevoluteJointDef_maxMotorTorque_set), -1);
  rb_define_method(SwigClassB2RevoluteJointDef.klass, "maxMotorTorque", VALUEFUNC(_wrap_B2RevoluteJointDef_maxMotorTorque_get), -1);
  SwigClassB2RevoluteJointDef.mark = 0;
  SwigClassB2RevoluteJointDef.destroy = (void (*)(void *)) free_b2RevoluteJointDef;
  SwigClassB2RevoluteJointDef.trackObjects = 1;
  
  SwigClassB2RevoluteJoint.klass = rb_define_class_under(mLiquidfun, "B2RevoluteJoint", ((swig_class *) SWIGTYPE_p_b2Joint->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2RevoluteJoint, (void *) &SwigClassB2RevoluteJoint);
  rb_undef_alloc_func(SwigClassB2RevoluteJoint.klass);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_anchor_a", VALUEFUNC(_wrap_B2RevoluteJoint_get_anchor_a), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_anchor_b", VALUEFUNC(_wrap_B2RevoluteJoint_get_anchor_b), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_local_anchor_a", VALUEFUNC(_wrap_B2RevoluteJoint_get_local_anchor_a), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_local_anchor_b", VALUEFUNC(_wrap_B2RevoluteJoint_get_local_anchor_b), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_reference_angle", VALUEFUNC(_wrap_B2RevoluteJoint_get_reference_angle), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_joint_angle", VALUEFUNC(_wrap_B2RevoluteJoint_get_joint_angle), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_joint_speed", VALUEFUNC(_wrap_B2RevoluteJoint_get_joint_speed), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "is_limit_enabled", VALUEFUNC(_wrap_B2RevoluteJoint_is_limit_enabled), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "enable_limit", VALUEFUNC(_wrap_B2RevoluteJoint_enable_limit), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_lower_limit", VALUEFUNC(_wrap_B2RevoluteJoint_get_lower_limit), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_upper_limit", VALUEFUNC(_wrap_B2RevoluteJoint_get_upper_limit), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "set_limits", VALUEFUNC(_wrap_B2RevoluteJoint_set_limits), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "is_motor_enabled", VALUEFUNC(_wrap_B2RevoluteJoint_is_motor_enabled), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "enable_motor", VALUEFUNC(_wrap_B2RevoluteJoint_enable_motor), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "set_motor_speed", VALUEFUNC(_wrap_B2RevoluteJoint_set_motor_speed), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_motor_speed", VALUEFUNC(_wrap_B2RevoluteJoint_get_motor_speed), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "set_max_motor_torque", VALUEFUNC(_wrap_B2RevoluteJoint_set_max_motor_torque), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_max_motor_torque", VALUEFUNC(_wrap_B2RevoluteJoint_get_max_motor_torque), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_reaction_force", VALUEFUNC(_wrap_B2RevoluteJoint_get_reaction_force), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_reaction_torque", VALUEFUNC(_wrap_B2RevoluteJoint_get_reaction_torque), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "get_motor_torque", VALUEFUNC(_wrap_B2RevoluteJoint_get_motor_torque), -1);
  rb_define_method(SwigClassB2RevoluteJoint.klass, "dump", VALUEFUNC(_wrap_B2RevoluteJoint_dump), -1);
  SwigClassB2RevoluteJoint.mark = 0;
  SwigClassB2RevoluteJoint.trackObjects = 1;
  
  SwigClassB2MotorJointDef.klass = rb_define_class_under(mLiquidfun, "B2MotorJointDef", ((swig_class *) SWIGTYPE_p_b2JointDef->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2MotorJointDef, (void *) &SwigClassB2MotorJointDef);
  rb_define_alloc_func(SwigClassB2MotorJointDef.klass, _wrap_B2MotorJointDef_allocate);
  rb_define_method(SwigClassB2MotorJointDef.klass, "initialize", VALUEFUNC(_wrap_new_B2MotorJointDef), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "init", VALUEFUNC(_wrap_B2MotorJointDef_init), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "linearOffset=", VALUEFUNC(_wrap_B2MotorJointDef_linearOffset_set), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "linearOffset", VALUEFUNC(_wrap_B2MotorJointDef_linearOffset_get), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "angularOffset=", VALUEFUNC(_wrap_B2MotorJointDef_angularOffset_set), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "angularOffset", VALUEFUNC(_wrap_B2MotorJointDef_angularOffset_get), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "maxForce=", VALUEFUNC(_wrap_B2MotorJointDef_maxForce_set), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "maxForce", VALUEFUNC(_wrap_B2MotorJointDef_maxForce_get), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "maxTorque=", VALUEFUNC(_wrap_B2MotorJointDef_maxTorque_set), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "maxTorque", VALUEFUNC(_wrap_B2MotorJointDef_maxTorque_get), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "correctionFactor=", VALUEFUNC(_wrap_B2MotorJointDef_correctionFactor_set), -1);
  rb_define_method(SwigClassB2MotorJointDef.klass, "correctionFactor", VALUEFUNC(_wrap_B2MotorJointDef_correctionFactor_get), -1);
  SwigClassB2MotorJointDef.mark = 0;
  SwigClassB2MotorJointDef.destroy = (void (*)(void *)) free_b2MotorJointDef;
  SwigClassB2MotorJointDef.trackObjects = 1;
  
  SwigClassB2MotorJoint.klass = rb_define_class_under(mLiquidfun, "B2MotorJoint", ((swig_class *) SWIGTYPE_p_b2Joint->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_b2MotorJoint, (void *) &SwigClassB2MotorJoint);
  rb_undef_alloc_func(SwigClassB2MotorJoint.klass);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_anchor_a", VALUEFUNC(_wrap_B2MotorJoint_get_anchor_a), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_anchor_b", VALUEFUNC(_wrap_B2MotorJoint_get_anchor_b), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_reaction_force", VALUEFUNC(_wrap_B2MotorJoint_get_reaction_force), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_reaction_torque", VALUEFUNC(_wrap_B2MotorJoint_get_reaction_torque), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "set_linear_offset", VALUEFUNC(_wrap_B2MotorJoint_set_linear_offset), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_linear_offset", VALUEFUNC(_wrap_B2MotorJoint_get_linear_offset), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "set_angular_offset", VALUEFUNC(_wrap_B2MotorJoint_set_angular_offset), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_angular_offset", VALUEFUNC(_wrap_B2MotorJoint_get_angular_offset), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "set_max_force", VALUEFUNC(_wrap_B2MotorJoint_set_max_force), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_max_force", VALUEFUNC(_wrap_B2MotorJoint_get_max_force), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "set_max_torque", VALUEFUNC(_wrap_B2MotorJoint_set_max_torque), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_max_torque", VALUEFUNC(_wrap_B2MotorJoint_get_max_torque), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "set_correction_factor", VALUEFUNC(_wrap_B2MotorJoint_set_correction_factor), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "get_correction_factor", VALUEFUNC(_wrap_B2MotorJoint_get_correction_factor), -1);
  rb_define_method(SwigClassB2MotorJoint.klass, "dump", VALUEFUNC(_wrap_B2MotorJoint_dump), -1);
  SwigClassB2MotorJoint.mark = 0;
  SwigClassB2MotorJoint.trackObjects = 1;
  rb_define_const(mLiquidfun, "B2_WATERPARTICLE", SWIG_From_int(static_cast< int >(b2_waterParticle)));
  rb_define_const(mLiquidfun, "B2_ZOMBIEPARTICLE", SWIG_From_int(static_cast< int >(b2_zombieParticle)));
  rb_define_const(mLiquidfun, "B2_WALLPARTICLE", SWIG_From_int(static_cast< int >(b2_wallParticle)));
  rb_define_const(mLiquidfun, "B2_SPRINGPARTICLE", SWIG_From_int(static_cast< int >(b2_springParticle)));
  rb_define_const(mLiquidfun, "B2_ELASTICPARTICLE", SWIG_From_int(static_cast< int >(b2_elasticParticle)));
  rb_define_const(mLiquidfun, "B2_VISCOUSPARTICLE", SWIG_From_int(static_cast< int >(b2_viscousParticle)));
  rb_define_const(mLiquidfun, "B2_POWDERPARTICLE", SWIG_From_int(static_cast< int >(b2_powderParticle)));
  rb_define_const(mLiquidfun, "B2_TENSILEPARTICLE", SWIG_From_int(static_cast< int >(b2_tensileParticle)));
  rb_define_const(mLiquidfun, "B2_COLORMIXINGPARTICLE", SWIG_From_int(static_cast< int >(b2_colorMixingParticle)));
  rb_define_const(mLiquidfun, "B2_DESTRUCTIONLISTENERPARTICLE", SWIG_From_int(static_cast< int >(b2_destructionListenerParticle)));
  rb_define_const(mLiquidfun, "B2_BARRIERPARTICLE", SWIG_From_int(static_cast< int >(b2_barrierParticle)));
  rb_define_const(mLiquidfun, "B2_STATICPRESSUREPARTICLE", SWIG_From_int(static_cast< int >(b2_staticPressureParticle)));
  rb_define_const(mLiquidfun, "B2_REACTIVEPARTICLE", SWIG_From_int(static_cast< int >(b2_reactiveParticle)));
  rb_define_const(mLiquidfun, "B2_REPULSIVEPARTICLE", SWIG_From_int(static_cast< int >(b2_repulsiveParticle)));
  rb_define_const(mLiquidfun, "B2_FIXTURECONTACTLISTENERPARTICLE", SWIG_From_int(static_cast< int >(b2_fixtureContactListenerParticle)));
  rb_define_const(mLiquidfun, "B2_PARTICLECONTACTLISTENERPARTICLE", SWIG_From_int(static_cast< int >(b2_particleContactListenerParticle)));
  rb_define_const(mLiquidfun, "B2_FIXTURECONTACTFILTERPARTICLE", SWIG_From_int(static_cast< int >(b2_fixtureContactFilterParticle)));
  rb_define_const(mLiquidfun, "B2_PARTICLECONTACTFILTERPARTICLE", SWIG_From_int(static_cast< int >(b2_particleContactFilterParticle)));
  
  SwigClassB2ParticleColor.klass = rb_define_class_under(mLiquidfun, "B2ParticleColor", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleColor, (void *) &SwigClassB2ParticleColor);
  rb_define_alloc_func(SwigClassB2ParticleColor.klass, _wrap_B2ParticleColor_allocate);
  rb_define_method(SwigClassB2ParticleColor.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticleColor), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "is_zero", VALUEFUNC(_wrap_B2ParticleColor_is_zero), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "set", VALUEFUNC(_wrap_B2ParticleColor_set), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "*", VALUEFUNC(_wrap_B2ParticleColor___mul__), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "+", VALUEFUNC(_wrap_B2ParticleColor___add__), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "-", VALUEFUNC(_wrap_B2ParticleColor___sub__), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "==", VALUEFUNC(_wrap_B2ParticleColor___eq__), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "mix", VALUEFUNC(_wrap_B2ParticleColor_mix), -1);
  rb_define_singleton_method(SwigClassB2ParticleColor.klass, "mix_colors", VALUEFUNC(_wrap_B2ParticleColor_mix_colors), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "r=", VALUEFUNC(_wrap_B2ParticleColor_r_set), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "r", VALUEFUNC(_wrap_B2ParticleColor_r_get), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "g=", VALUEFUNC(_wrap_B2ParticleColor_g_set), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "g", VALUEFUNC(_wrap_B2ParticleColor_g_get), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "b=", VALUEFUNC(_wrap_B2ParticleColor_b_set), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "b", VALUEFUNC(_wrap_B2ParticleColor_b_get), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "a=", VALUEFUNC(_wrap_B2ParticleColor_a_set), -1);
  rb_define_method(SwigClassB2ParticleColor.klass, "a", VALUEFUNC(_wrap_B2ParticleColor_a_get), -1);
  SwigClassB2ParticleColor.mark = 0;
  SwigClassB2ParticleColor.destroy = (void (*)(void *)) free_b2ParticleColor;
  SwigClassB2ParticleColor.trackObjects = 1;
  rb_define_singleton_method(mLiquidfun, "b2ParticleColor_zero", VALUEFUNC(_wrap_b2ParticleColor_zero_get), 0);
  rb_define_singleton_method(mLiquidfun, "b2ParticleColor_zero=", VALUEFUNC(_wrap_b2ParticleColor_zero_set), 1);
  
  SwigClassB2ParticleDef.klass = rb_define_class_under(mLiquidfun, "B2ParticleDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleDef, (void *) &SwigClassB2ParticleDef);
  rb_define_alloc_func(SwigClassB2ParticleDef.klass, _wrap_B2ParticleDef_allocate);
  rb_define_method(SwigClassB2ParticleDef.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticleDef), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "set_position", VALUEFUNC(_wrap_B2ParticleDef_set_position), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "set_color", VALUEFUNC(_wrap_B2ParticleDef_set_color), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "flags=", VALUEFUNC(_wrap_B2ParticleDef_flags_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "flags", VALUEFUNC(_wrap_B2ParticleDef_flags_get), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "position=", VALUEFUNC(_wrap_B2ParticleDef_position_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "position", VALUEFUNC(_wrap_B2ParticleDef_position_get), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "velocity=", VALUEFUNC(_wrap_B2ParticleDef_velocity_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "velocity", VALUEFUNC(_wrap_B2ParticleDef_velocity_get), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "color=", VALUEFUNC(_wrap_B2ParticleDef_color_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "color", VALUEFUNC(_wrap_B2ParticleDef_color_get), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "lifetime=", VALUEFUNC(_wrap_B2ParticleDef_lifetime_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "lifetime", VALUEFUNC(_wrap_B2ParticleDef_lifetime_get), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "group=", VALUEFUNC(_wrap_B2ParticleDef_group_set), -1);
  rb_define_method(SwigClassB2ParticleDef.klass, "group", VALUEFUNC(_wrap_B2ParticleDef_group_get), -1);
  SwigClassB2ParticleDef.mark = 0;
  SwigClassB2ParticleDef.destroy = (void (*)(void *)) free_b2ParticleDef;
  SwigClassB2ParticleDef.trackObjects = 1;
  rb_define_module_function(mLiquidfun, "b_2calculate_particle_iterations", VALUEFUNC(_wrap_b_2calculate_particle_iterations), -1);
  
  SwigClassB2ParticleGroup.klass = rb_define_class_under(mLiquidfun, "B2ParticleGroup", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleGroup, (void *) &SwigClassB2ParticleGroup);
  rb_undef_alloc_func(SwigClassB2ParticleGroup.klass);
  rb_define_method(SwigClassB2ParticleGroup.klass, "get_next", VALUEFUNC(_wrap_B2ParticleGroup_get_next), -1);
  rb_define_method(SwigClassB2ParticleGroup.klass, "get_particle_count", VALUEFUNC(_wrap_B2ParticleGroup_get_particle_count), -1);
  rb_define_method(SwigClassB2ParticleGroup.klass, "get_buffer_index", VALUEFUNC(_wrap_B2ParticleGroup_get_buffer_index), -1);
  rb_define_method(SwigClassB2ParticleGroup.klass, "get_group_flags", VALUEFUNC(_wrap_B2ParticleGroup_get_group_flags), -1);
  SwigClassB2ParticleGroup.mark = 0;
  SwigClassB2ParticleGroup.trackObjects = 1;
  rb_define_const(mLiquidfun, "B2_SOLIDPARTICLEGROUP", SWIG_From_int(static_cast< int >(b2_solidParticleGroup)));
  rb_define_const(mLiquidfun, "B2_RIGIDPARTICLEGROUP", SWIG_From_int(static_cast< int >(b2_rigidParticleGroup)));
  rb_define_const(mLiquidfun, "B2_PARTICLEGROUPCANBEEMPTY", SWIG_From_int(static_cast< int >(b2_particleGroupCanBeEmpty)));
  
  SwigClassB2ParticleGroupDef.klass = rb_define_class_under(mLiquidfun, "B2ParticleGroupDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleGroupDef, (void *) &SwigClassB2ParticleGroupDef);
  rb_define_alloc_func(SwigClassB2ParticleGroupDef.klass, _wrap_B2ParticleGroupDef_allocate);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticleGroupDef), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "flags=", VALUEFUNC(_wrap_B2ParticleGroupDef_flags_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "flags", VALUEFUNC(_wrap_B2ParticleGroupDef_flags_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "groupFlags=", VALUEFUNC(_wrap_B2ParticleGroupDef_groupFlags_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "groupFlags", VALUEFUNC(_wrap_B2ParticleGroupDef_groupFlags_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "position=", VALUEFUNC(_wrap_B2ParticleGroupDef_position_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "position", VALUEFUNC(_wrap_B2ParticleGroupDef_position_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "angle=", VALUEFUNC(_wrap_B2ParticleGroupDef_angle_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "angle", VALUEFUNC(_wrap_B2ParticleGroupDef_angle_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "linearVelocity=", VALUEFUNC(_wrap_B2ParticleGroupDef_linearVelocity_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "linearVelocity", VALUEFUNC(_wrap_B2ParticleGroupDef_linearVelocity_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "angularVelocity=", VALUEFUNC(_wrap_B2ParticleGroupDef_angularVelocity_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "angularVelocity", VALUEFUNC(_wrap_B2ParticleGroupDef_angularVelocity_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "color=", VALUEFUNC(_wrap_B2ParticleGroupDef_color_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "color", VALUEFUNC(_wrap_B2ParticleGroupDef_color_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "strength=", VALUEFUNC(_wrap_B2ParticleGroupDef_strength_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "strength", VALUEFUNC(_wrap_B2ParticleGroupDef_strength_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "shape=", VALUEFUNC(_wrap_B2ParticleGroupDef_shape_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "shape", VALUEFUNC(_wrap_B2ParticleGroupDef_shape_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "shapeCount=", VALUEFUNC(_wrap_B2ParticleGroupDef_shapeCount_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "shapeCount", VALUEFUNC(_wrap_B2ParticleGroupDef_shapeCount_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "stride=", VALUEFUNC(_wrap_B2ParticleGroupDef_stride_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "stride", VALUEFUNC(_wrap_B2ParticleGroupDef_stride_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "particleCount=", VALUEFUNC(_wrap_B2ParticleGroupDef_particleCount_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "particleCount", VALUEFUNC(_wrap_B2ParticleGroupDef_particleCount_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "positionData=", VALUEFUNC(_wrap_B2ParticleGroupDef_positionData_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "positionData", VALUEFUNC(_wrap_B2ParticleGroupDef_positionData_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "lifetime=", VALUEFUNC(_wrap_B2ParticleGroupDef_lifetime_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "lifetime", VALUEFUNC(_wrap_B2ParticleGroupDef_lifetime_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "group=", VALUEFUNC(_wrap_B2ParticleGroupDef_group_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "group", VALUEFUNC(_wrap_B2ParticleGroupDef_group_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "circleShapes=", VALUEFUNC(_wrap_B2ParticleGroupDef_circleShapes_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "circleShapes", VALUEFUNC(_wrap_B2ParticleGroupDef_circleShapes_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "ownShapesArray=", VALUEFUNC(_wrap_B2ParticleGroupDef_ownShapesArray_set), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "ownShapesArray", VALUEFUNC(_wrap_B2ParticleGroupDef_ownShapesArray_get), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "free_shapes_memory", VALUEFUNC(_wrap_B2ParticleGroupDef_free_shapes_memory), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "set_circle_shapes_from_vertex_list", VALUEFUNC(_wrap_B2ParticleGroupDef_set_circle_shapes_from_vertex_list), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "set_position", VALUEFUNC(_wrap_B2ParticleGroupDef_set_position), -1);
  rb_define_method(SwigClassB2ParticleGroupDef.klass, "set_color", VALUEFUNC(_wrap_B2ParticleGroupDef_set_color), -1);
  SwigClassB2ParticleGroupDef.mark = 0;
  SwigClassB2ParticleGroupDef.destroy = (void (*)(void *)) free_b2ParticleGroupDef;
  SwigClassB2ParticleGroupDef.trackObjects = 1;
  
  SwigClassB2ParticleSystem.klass = rb_define_class_under(mLiquidfun, "B2ParticleSystem", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleSystem, (void *) &SwigClassB2ParticleSystem);
  rb_undef_alloc_func(SwigClassB2ParticleSystem.klass);
  rb_define_method(SwigClassB2ParticleSystem.klass, "create_particle", VALUEFUNC(_wrap_B2ParticleSystem_create_particle), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "join_particle_groups", VALUEFUNC(_wrap_B2ParticleSystem_join_particle_groups), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "get_particle_group_list", VALUEFUNC(_wrap_B2ParticleSystem_get_particle_group_list), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "destroy_particles_in_shape", VALUEFUNC(_wrap_B2ParticleSystem_destroy_particles_in_shape), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "create_particle_group", VALUEFUNC(_wrap_B2ParticleSystem_create_particle_group), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "get_particle_group_count", VALUEFUNC(_wrap_B2ParticleSystem_get_particle_group_count), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "get_particle_count", VALUEFUNC(_wrap_B2ParticleSystem_get_particle_count), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "set_max_particle_count", VALUEFUNC(_wrap_B2ParticleSystem_set_max_particle_count), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "set_damping", VALUEFUNC(_wrap_B2ParticleSystem_set_damping), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "set_radius", VALUEFUNC(_wrap_B2ParticleSystem_set_radius), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "query_shape_aabb", VALUEFUNC(_wrap_B2ParticleSystem_query_shape_aabb), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "set_particle_velocity", VALUEFUNC(_wrap_B2ParticleSystem_set_particle_velocity), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "get_particle_position_x", VALUEFUNC(_wrap_B2ParticleSystem_get_particle_position_x), -1);
  rb_define_method(SwigClassB2ParticleSystem.klass, "get_particle_position_y", VALUEFUNC(_wrap_B2ParticleSystem_get_particle_position_y), -1);
  SwigClassB2ParticleSystem.mark = 0;
  SwigClassB2ParticleSystem.trackObjects = 1;
  
  SwigClassB2ParticlePair.klass = rb_define_class_under(mLiquidfun, "B2ParticlePair", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticlePair, (void *) &SwigClassB2ParticlePair);
  rb_define_alloc_func(SwigClassB2ParticlePair.klass, _wrap_B2ParticlePair_allocate);
  rb_define_method(SwigClassB2ParticlePair.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticlePair), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "indexA=", VALUEFUNC(_wrap_B2ParticlePair_indexA_set), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "indexA", VALUEFUNC(_wrap_B2ParticlePair_indexA_get), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "indexB=", VALUEFUNC(_wrap_B2ParticlePair_indexB_set), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "indexB", VALUEFUNC(_wrap_B2ParticlePair_indexB_get), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "flags=", VALUEFUNC(_wrap_B2ParticlePair_flags_set), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "flags", VALUEFUNC(_wrap_B2ParticlePair_flags_get), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "strength=", VALUEFUNC(_wrap_B2ParticlePair_strength_set), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "strength", VALUEFUNC(_wrap_B2ParticlePair_strength_get), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "distance=", VALUEFUNC(_wrap_B2ParticlePair_distance_set), -1);
  rb_define_method(SwigClassB2ParticlePair.klass, "distance", VALUEFUNC(_wrap_B2ParticlePair_distance_get), -1);
  SwigClassB2ParticlePair.mark = 0;
  SwigClassB2ParticlePair.destroy = (void (*)(void *)) free_b2ParticlePair;
  SwigClassB2ParticlePair.trackObjects = 1;
  
  SwigClassB2ParticleTriad.klass = rb_define_class_under(mLiquidfun, "B2ParticleTriad", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleTriad, (void *) &SwigClassB2ParticleTriad);
  rb_define_alloc_func(SwigClassB2ParticleTriad.klass, _wrap_B2ParticleTriad_allocate);
  rb_define_method(SwigClassB2ParticleTriad.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticleTriad), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexA=", VALUEFUNC(_wrap_B2ParticleTriad_indexA_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexA", VALUEFUNC(_wrap_B2ParticleTriad_indexA_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexB=", VALUEFUNC(_wrap_B2ParticleTriad_indexB_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexB", VALUEFUNC(_wrap_B2ParticleTriad_indexB_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexC=", VALUEFUNC(_wrap_B2ParticleTriad_indexC_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "indexC", VALUEFUNC(_wrap_B2ParticleTriad_indexC_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "flags=", VALUEFUNC(_wrap_B2ParticleTriad_flags_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "flags", VALUEFUNC(_wrap_B2ParticleTriad_flags_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "strength=", VALUEFUNC(_wrap_B2ParticleTriad_strength_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "strength", VALUEFUNC(_wrap_B2ParticleTriad_strength_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pa=", VALUEFUNC(_wrap_B2ParticleTriad_pa_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pa", VALUEFUNC(_wrap_B2ParticleTriad_pa_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pb=", VALUEFUNC(_wrap_B2ParticleTriad_pb_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pb", VALUEFUNC(_wrap_B2ParticleTriad_pb_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pc=", VALUEFUNC(_wrap_B2ParticleTriad_pc_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "pc", VALUEFUNC(_wrap_B2ParticleTriad_pc_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "ka=", VALUEFUNC(_wrap_B2ParticleTriad_ka_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "ka", VALUEFUNC(_wrap_B2ParticleTriad_ka_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "kb=", VALUEFUNC(_wrap_B2ParticleTriad_kb_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "kb", VALUEFUNC(_wrap_B2ParticleTriad_kb_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "kc=", VALUEFUNC(_wrap_B2ParticleTriad_kc_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "kc", VALUEFUNC(_wrap_B2ParticleTriad_kc_get), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "s=", VALUEFUNC(_wrap_B2ParticleTriad_s_set), -1);
  rb_define_method(SwigClassB2ParticleTriad.klass, "s", VALUEFUNC(_wrap_B2ParticleTriad_s_get), -1);
  SwigClassB2ParticleTriad.mark = 0;
  SwigClassB2ParticleTriad.destroy = (void (*)(void *)) free_b2ParticleTriad;
  SwigClassB2ParticleTriad.trackObjects = 1;
  
  SwigClassB2ParticleSystemDef.klass = rb_define_class_under(mLiquidfun, "B2ParticleSystemDef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_b2ParticleSystemDef, (void *) &SwigClassB2ParticleSystemDef);
  rb_define_alloc_func(SwigClassB2ParticleSystemDef.klass, _wrap_B2ParticleSystemDef_allocate);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "initialize", VALUEFUNC(_wrap_new_B2ParticleSystemDef), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "strictContactCheck=", VALUEFUNC(_wrap_B2ParticleSystemDef_strictContactCheck_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "strictContactCheck", VALUEFUNC(_wrap_B2ParticleSystemDef_strictContactCheck_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "density=", VALUEFUNC(_wrap_B2ParticleSystemDef_density_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "density", VALUEFUNC(_wrap_B2ParticleSystemDef_density_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "gravityScale=", VALUEFUNC(_wrap_B2ParticleSystemDef_gravityScale_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "gravityScale", VALUEFUNC(_wrap_B2ParticleSystemDef_gravityScale_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "radius=", VALUEFUNC(_wrap_B2ParticleSystemDef_radius_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "radius", VALUEFUNC(_wrap_B2ParticleSystemDef_radius_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "maxCount=", VALUEFUNC(_wrap_B2ParticleSystemDef_maxCount_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "maxCount", VALUEFUNC(_wrap_B2ParticleSystemDef_maxCount_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "pressureStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_pressureStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "pressureStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_pressureStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "dampingStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_dampingStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "dampingStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_dampingStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "elasticStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_elasticStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "elasticStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_elasticStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "springStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_springStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "springStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_springStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "viscousStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_viscousStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "viscousStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_viscousStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "surfaceTensionPressureStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_surfaceTensionPressureStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "surfaceTensionPressureStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_surfaceTensionPressureStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "surfaceTensionNormalStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_surfaceTensionNormalStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "surfaceTensionNormalStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_surfaceTensionNormalStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "repulsiveStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_repulsiveStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "repulsiveStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_repulsiveStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "powderStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_powderStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "powderStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_powderStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "ejectionStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_ejectionStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "ejectionStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_ejectionStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureRelaxation=", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureRelaxation_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureRelaxation", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureRelaxation_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureIterations=", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureIterations_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "staticPressureIterations", VALUEFUNC(_wrap_B2ParticleSystemDef_staticPressureIterations_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "colorMixingStrength=", VALUEFUNC(_wrap_B2ParticleSystemDef_colorMixingStrength_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "colorMixingStrength", VALUEFUNC(_wrap_B2ParticleSystemDef_colorMixingStrength_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "destroyByAge=", VALUEFUNC(_wrap_B2ParticleSystemDef_destroyByAge_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "destroyByAge", VALUEFUNC(_wrap_B2ParticleSystemDef_destroyByAge_get), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "lifetimeGranularity=", VALUEFUNC(_wrap_B2ParticleSystemDef_lifetimeGranularity_set), -1);
  rb_define_method(SwigClassB2ParticleSystemDef.klass, "lifetimeGranularity", VALUEFUNC(_wrap_B2ParticleSystemDef_lifetimeGranularity_get), -1);
  SwigClassB2ParticleSystemDef.mark = 0;
  SwigClassB2ParticleSystemDef.destroy = (void (*)(void *)) free_b2ParticleSystemDef;
  SwigClassB2ParticleSystemDef.trackObjects = 1;
}

